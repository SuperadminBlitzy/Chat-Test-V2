package com.ufs.risk.dto;

import lombok.AllArgsConstructor; // lombok v1.18.30
import lombok.Data; // lombok v1.18.30
import lombok.NoArgsConstructor; // lombok v1.18.30

import java.math.BigDecimal; // java.math v21
import java.util.List; // java.util v21

/**
 * Data Transfer Object (DTO) for returning the result of a fraud detection analysis.
 * 
 * This class encapsulates the fraud score, risk level, and recommended action for a given transaction.
 * It represents the output of the AI-powered risk assessment engine as specified in requirements
 * F-002 (AI-Powered Risk Assessment Engine) and F-006 (Fraud Detection System).
 * 
 * The fraud detection response provides comprehensive information about the transaction risk assessment
 * including numerical scores, categorical risk levels, actionable recommendations, confidence metrics,
 * and detailed reasoning for the assessment.
 * 
 * Performance Requirements:
 * - Generated within 500ms for 99% of requests (F-002-RQ-001)
 * - Supports risk scores on 0-1000 scale with 95% accuracy rate
 * - Includes explainable AI components with confidence intervals
 * 
 * Security Considerations:
 * - Contains sensitive financial risk data requiring proper access controls
 * - All data should be handled with appropriate encryption in transit and at rest
 * - Audit logging should be implemented for all fraud detection responses
 * 
 * @author UFS Risk Assessment Service
 * @version 1.0
 * @since 2025
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class FraudDetectionResponse {

    /**
     * Unique identifier for the transaction being analyzed.
     * 
     * This field links the fraud detection response back to the specific transaction
     * that was evaluated by the AI-powered risk assessment engine. It enables
     * correlation between the original transaction request and the risk analysis result.
     * 
     * @example "txn_1234567890abcdef"
     */
    private String transactionId;

    /**
     * Numerical fraud score indicating the likelihood of fraudulent activity.
     * 
     * The score ranges from 0 to 1000, where:
     * - 0-200: Low risk (proceed with transaction)
     * - 201-500: Medium risk (apply additional verification)
     * - 501-750: High risk (require manual review)
     * - 751-1000: Critical risk (block transaction)
     * 
     * This score is generated by the AI-powered risk assessment engine using
     * machine learning models trained on historical transaction data and
     * real-time risk factors.
     * 
     * @example 125 (low risk), 650 (high risk)
     */
    private Integer fraudScore;

    /**
     * Categorical risk level classification for the transaction.
     * 
     * Provides a human-readable risk category that corresponds to the numerical
     * fraud score. This field enables quick decision-making by business users
     * without requiring interpretation of numerical scores.
     * 
     * Valid values:
     * - "LOW": Minimal fraud risk, proceed with normal processing
     * - "MEDIUM": Moderate risk, apply enhanced verification
     * - "HIGH": Significant risk, require manual review
     * - "CRITICAL": Extreme risk, immediate blocking recommended
     * 
     * @example "LOW", "HIGH", "CRITICAL"
     */
    private String riskLevel;

    /**
     * Recommended action to take based on the fraud analysis.
     * 
     * Provides specific guidance on how to handle the transaction based on
     * the risk assessment results. This field enables automated decision-making
     * in downstream systems and provides clear guidance to human reviewers.
     * 
     * Common recommendations:
     * - "APPROVE": Process transaction normally
     * - "REVIEW": Require manual review before processing
     * - "CHALLENGE": Request additional customer verification
     * - "BLOCK": Prevent transaction from proceeding
     * - "MONITOR": Allow transaction but flag for monitoring
     * 
     * @example "APPROVE", "REVIEW", "BLOCK"
     */
    private String recommendation;

    /**
     * Confidence level of the fraud detection analysis.
     * 
     * Represents the AI model's confidence in its assessment as a decimal value
     * between 0.0 and 1.0, where higher values indicate greater confidence.
     * This metric helps determine the reliability of the fraud detection result
     * and can be used to trigger different response paths.
     * 
     * BigDecimal is used for precise financial calculations and to avoid
     * floating-point precision issues that could affect risk decisions.
     * 
     * Confidence ranges:
     * - 0.0-0.6: Low confidence (consider additional verification)
     * - 0.6-0.8: Medium confidence (standard processing)
     * - 0.8-1.0: High confidence (reliable assessment)
     * 
     * @example 0.85 (high confidence), 0.42 (low confidence)
     */
    private BigDecimal confidenceScore;

    /**
     * List of reasons that contributed to the fraud assessment.
     * 
     * Provides explainable AI functionality by listing the specific factors
     * that influenced the fraud detection decision. This transparency is
     * required for regulatory compliance and helps human reviewers understand
     * the basis for the AI recommendation.
     * 
     * Each reason describes a specific risk factor or pattern detected by
     * the machine learning model. The list is ordered by significance,
     * with the most influential factors appearing first.
     * 
     * Example reasons:
     * - "Unusual transaction amount for customer profile"
     * - "Transaction originated from high-risk geographic location"
     * - "Velocity anomaly: Multiple transactions in short timeframe"
     * - "Payment method inconsistent with customer history"
     * - "Merchant category code flagged for high fraud rates"
     * - "Device fingerprint not recognized"
     * 
     * This field supports the requirement for explainable AI systems
     * (F-002-RQ-003) and enables human reviewers to make informed decisions
     * about transaction approval or rejection.
     * 
     * @example ["High transaction velocity", "New merchant interaction", "Geolocation anomaly"]
     */
    private List<String> reasons;
}