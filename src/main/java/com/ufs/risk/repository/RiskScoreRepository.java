package com.ufs.risk.repository;

import com.ufs.risk.model.RiskScore; // Local entity
import org.springframework.data.jpa.repository.JpaRepository; // version 3.2.0
import org.springframework.data.jpa.repository.Query; // version 3.2.0
import org.springframework.data.repository.query.Param; // version 3.2.0
import java.util.Optional; // version 17
import java.util.List; // version 17
import java.time.LocalDateTime; // version 17

/**
 * Spring Data JPA Repository for RiskScore entity management
 * 
 * This repository provides comprehensive data access layer abstraction for risk scores
 * generated by the AI-Powered Risk Assessment Engine. It supports the F-002 functional
 * requirements including real-time risk scoring and predictive risk modeling capabilities.
 * 
 * Performance Requirements:
 * - Sub-500ms response time for risk score queries (F-002-RQ-001)
 * - Support for 5,000+ risk scoring requests per second
 * - 99.9% availability for real-time risk assessment operations
 * - 95% accuracy rate in risk assessment calculations
 * 
 * Business Requirements Addressed:
 * - F-002: AI-Powered Risk Assessment Engine
 * - F-002-RQ-001: Real-time risk scoring within 500ms
 * - F-002-RQ-002: Predictive risk modeling data persistence
 * - F-002-RQ-003: Model explainability and audit trail support
 * 
 * Technical Context:
 * - Integrates with PostgreSQL primary and read replica pools
 * - Supports connection pooling with 20 primary connections and 15 replica connections
 * - Implements query optimization for high-frequency risk assessment operations
 * - Provides comprehensive audit trail for regulatory compliance
 * 
 * Security Considerations:
 * - All queries support role-based access control
 * - Audit logging for compliance requirements
 * - Data encryption in transit and at rest
 * 
 * @author UFS Development Team
 * @version 1.0
 * @since 2025
 */
public interface RiskScoreRepository extends JpaRepository<RiskScore, Long> {

    /**
     * Finds the most recent risk score for a given customer ID.
     * 
     * This method supports real-time risk assessment by retrieving the latest
     * calculated risk score through a join with the risk profile entity to
     * access customer information. Essential for F-002-RQ-001 requirement
     * of sub-500ms response time for risk scoring operations.
     * 
     * Performance Optimization:
     * - Query optimized with composite index on (customer_id, assessment_date)
     * - Uses LIMIT 1 for efficient retrieval of latest record
     * - Leverages connection pooling for high-throughput operations
     * 
     * Business Logic:
     * - Orders by assessment_date DESC to get the most recent score
     * - Supports real-time risk decision making
     * - Enables quick creditworthiness assessment
     * 
     * @param customerId The unique identifier of the customer
     * @return Optional containing the latest RiskScore for the customer, or empty if none found
     */
    @Query("SELECT rs FROM RiskScore rs JOIN RiskProfile rp ON rs.riskProfileId = rp.id WHERE rp.customerId = :customerId ORDER BY rs.assessmentDate DESC LIMIT 1")
    Optional<RiskScore> findLatestByCustomerId(@Param("customerId") String customerId);

    /**
     * Finds the most recent risk score for a given risk profile ID.
     * 
     * This method provides direct access to risk scores by risk profile ID,
     * supporting internal system operations and batch processing workflows.
     * Optimized for high-frequency queries in the AI risk assessment pipeline.
     * 
     * @param riskProfileId The ID of the risk profile to query
     * @return Optional containing the latest RiskScore, or empty if none found
     */
    @Query("SELECT rs FROM RiskScore rs WHERE rs.riskProfileId = :riskProfileId ORDER BY rs.assessmentDate DESC LIMIT 1")
    Optional<RiskScore> findLatestByRiskProfileId(@Param("riskProfileId") Long riskProfileId);

    /**
     * Finds all risk scores for a specific customer with historical ordering.
     * 
     * This method enables comprehensive risk analysis and trend identification
     * for regulatory reporting, model validation, and customer risk profiling.
     * Supports F-002-RQ-002 predictive risk modeling requirements.
     * 
     * @param customerId The unique identifier of the customer
     * @return List of RiskScore records ordered by assessment date (newest first)
     */
    @Query("SELECT rs FROM RiskScore rs JOIN RiskProfile rp ON rs.riskProfileId = rp.id WHERE rp.customerId = :customerId ORDER BY rs.assessmentDate DESC")
    List<RiskScore> findAllByCustomerIdOrderByAssessmentDateDesc(@Param("customerId") String customerId);

    /**
     * Finds all risk scores for a specific risk profile, ordered by assessment date.
     * 
     * This method enables historical risk analysis and trend identification
     * for regulatory reporting and risk management monitoring.
     * 
     * @param riskProfileId The ID of the risk profile
     * @return List of RiskScore records ordered by assessment date (newest first)
     */
    @Query("SELECT rs FROM RiskScore rs WHERE rs.riskProfileId = :riskProfileId ORDER BY rs.assessmentDate DESC")
    List<RiskScore> findAllByRiskProfileIdOrderByAssessmentDateDesc(@Param("riskProfileId") Long riskProfileId);

    /**
     * Finds risk scores within a specific score range for risk categorization.
     * 
     * This method supports risk distribution analysis and portfolio management
     * by enabling efficient retrieval of risk scores within specific thresholds:
     * - LOW risk: 0-300
     * - MEDIUM risk: 301-700  
     * - HIGH risk: 701-1000
     * 
     * @param minScore Minimum score value (inclusive)
     * @param maxScore Maximum score value (inclusive)
     * @return List of RiskScore records within the specified range
     */
    @Query("SELECT rs FROM RiskScore rs WHERE rs.score BETWEEN :minScore AND :maxScore ORDER BY rs.score DESC, rs.assessmentDate DESC")
    List<RiskScore> findByScoreRange(@Param("minScore") Integer minScore, @Param("maxScore") Integer maxScore);

    /**
     * Finds risk scores by category for risk distribution analysis.
     * 
     * Supports compliance reporting and risk management dashboard requirements
     * by enabling efficient retrieval of risk scores by risk category.
     * Essential for regulatory reporting and executive dashboard metrics.
     * 
     * @param category The risk category (LOW, MEDIUM, HIGH)
     * @return List of RiskScore records matching the specified category
     */
    @Query("SELECT rs FROM RiskScore rs WHERE rs.category = :category ORDER BY rs.assessmentDate DESC")
    List<RiskScore> findByCategoryOrderByAssessmentDateDesc(@Param("category") String category);

    /**
     * Finds risk scores assessed within a specific time period.
     * 
     * This method supports regulatory reporting requirements and risk trend
     * analysis by enabling time-based risk score retrieval. Critical for
     * compliance audits and model performance monitoring.
     * 
     * @param startDate Start of the time period (inclusive)
     * @param endDate End of the time period (inclusive)
     * @return List of RiskScore records within the specified time period
     */
    @Query("SELECT rs FROM RiskScore rs WHERE rs.assessmentDate BETWEEN :startDate AND :endDate ORDER BY rs.assessmentDate DESC")
    List<RiskScore> findByAssessmentDateBetween(@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate);

    /**
     * Finds high-risk scores above a specified threshold for monitoring.
     * 
     * This method supports real-time risk monitoring and alert systems by
     * enabling efficient identification of high-risk profiles requiring
     * immediate attention. Critical for risk management and compliance workflows.
     * 
     * @param threshold The minimum risk score threshold (typically 701 for HIGH risk)
     * @return List of RiskScore records above the threshold, ordered by score (highest first)
     */
    @Query("SELECT rs FROM RiskScore rs WHERE rs.score >= :threshold ORDER BY rs.score DESC, rs.assessmentDate DESC")
    List<RiskScore> findHighRiskScoresAboveThreshold(@Param("threshold") Integer threshold);

    /**
     * Counts risk scores by category for dashboard metrics and reporting.
     * 
     * This method provides aggregated risk distribution data for executive
     * dashboards and compliance reporting without retrieving full entities.
     * Optimized for performance with count-only queries.
     * 
     * @param category The risk category to count
     * @return Number of risk scores in the specified category
     */
    @Query("SELECT COUNT(rs) FROM RiskScore rs WHERE rs.category = :category")
    Long countByCategory(@Param("category") String category);

    /**
     * Finds the latest risk score for each unique risk profile.
     * 
     * This method supports portfolio-wide risk assessment by providing
     * the most recent risk score for all active risk profiles. Essential
     * for comprehensive risk management and regulatory reporting.
     * 
     * @return List of latest RiskScore records for each risk profile
     */
    @Query("SELECT rs FROM RiskScore rs WHERE rs.assessmentDate = " +
           "(SELECT MAX(rs2.assessmentDate) FROM RiskScore rs2 WHERE rs2.riskProfileId = rs.riskProfileId)")
    List<RiskScore> findLatestScoreForAllProfiles();

    /**
     * Finds risk scores that require model revalidation based on age.
     * 
     * This method supports AI model governance by identifying risk scores
     * that are older than the specified cutoff date and may need reassessment.
     * Critical for maintaining model accuracy and regulatory compliance.
     * 
     * @param cutoffDate The cutoff date for revalidation assessment
     * @return List of RiskScore records requiring revalidation, ordered by age
     */
    @Query("SELECT rs FROM RiskScore rs WHERE rs.assessmentDate < :cutoffDate ORDER BY rs.assessmentDate ASC")
    List<RiskScore> findScoresRequiringRevalidation(@Param("cutoffDate") LocalDateTime cutoffDate);

    /**
     * Calculates average risk score by category for analytics.
     * 
     * This method supports risk analytics and trend analysis by providing
     * statistical aggregation of risk scores across different categories.
     * Used for model performance monitoring and business intelligence.
     * 
     * @param category The risk category to analyze
     * @return Average risk score for the specified category, null if no scores exist
     */
    @Query("SELECT AVG(rs.score) FROM RiskScore rs WHERE rs.category = :category")
    Double findAverageScoreByCategory(@Param("category") String category);

    /**
     * Finds risk scores for multiple customers efficiently.
     * 
     * This method supports batch processing and bulk risk assessment
     * operations by retrieving risk scores for multiple customers in
     * a single query, optimizing database round trips.
     * 
     * @param customerIds List of customer IDs to query
     * @return List of latest RiskScore records for the specified customers
     */
    @Query("SELECT rs FROM RiskScore rs JOIN RiskProfile rp ON rs.riskProfileId = rp.id " +
           "WHERE rp.customerId IN :customerIds AND rs.assessmentDate = " +
           "(SELECT MAX(rs2.assessmentDate) FROM RiskScore rs2 WHERE rs2.riskProfileId = rs.riskProfileId)")
    List<RiskScore> findLatestScoresByCustomerIds(@Param("customerIds") List<String> customerIds);

    /**
     * Spring Data JPA derived query method for finding by risk profile ID.
     * 
     * This method provides an alternative to the custom query method,
     * using Spring Data JPA's query derivation for simple lookups.
     * Automatically generates optimized SQL queries.
     * 
     * @param riskProfileId The risk profile ID to search for
     * @return List of all RiskScore records for the specified risk profile
     */
    List<RiskScore> findByRiskProfileId(Long riskProfileId);

    /**
     * Spring Data JPA derived query method for finding recent high-risk scores.
     * 
     * This method combines score threshold filtering with recency requirements
     * for real-time risk monitoring and alerting systems. Supports automated
     * risk management workflows and compliance monitoring.
     * 
     * @param minScore Minimum risk score threshold
     * @param assessmentDate Cutoff date for recent assessments
     * @return List of recent high-risk scores ordered by score (highest first)
     */
    List<RiskScore> findByScoreGreaterThanEqualAndAssessmentDateAfterOrderByScoreDesc(
        Integer minScore, LocalDateTime assessmentDate);

    /**
     * Spring Data JPA derived query method for category-based filtering.
     * 
     * This method provides efficient category-based retrieval with automatic
     * ordering by assessment date for chronological analysis. Used by
     * dashboard components and reporting services.
     * 
     * @param category The risk category to filter by
     * @return List of RiskScore records in the specified category
     */
    List<RiskScore> findByCategoryOrderByAssessmentDateDesc(String category);

    /**
     * Checks if a risk score exists for a given risk profile.
     * 
     * This method supports efficient existence checking without loading
     * full entities, useful for validation and workflow decision logic.
     * Optimized for performance with boolean return type.
     * 
     * @param riskProfileId The risk profile ID to check
     * @return true if at least one risk score exists, false otherwise
     */
    boolean existsByRiskProfileId(Long riskProfileId);

    /**
     * Counts total risk scores for a specific risk profile.
     * 
     * This method provides efficient counting for pagination and
     * statistical analysis without loading entity data.
     * 
     * @param riskProfileId The risk profile ID to count
     * @return Total number of risk scores for the specified risk profile
     */
    long countByRiskProfileId(Long riskProfileId);

    /**
     * Finds risk scores created within the last specified number of days.
     * 
     * This method supports real-time monitoring and recent activity analysis
     * by retrieving risk scores created within a specific time window.
     * 
     * @param days Number of days to look back from current date
     * @return List of RiskScore records created within the specified period
     */
    @Query("SELECT rs FROM RiskScore rs WHERE rs.assessmentDate >= :cutoffDate ORDER BY rs.assessmentDate DESC")
    List<RiskScore> findRecentScores(@Param("cutoffDate") LocalDateTime cutoffDate);

    /**
     * Finds the oldest risk score for data lifecycle management.
     * 
     * This method supports data retention and archival processes by
     * identifying the oldest risk score records that may need archiving
     * or deletion according to regulatory requirements.
     * 
     * @return Optional containing the oldest RiskScore record, or empty if none exist
     */
    @Query("SELECT rs FROM RiskScore rs ORDER BY rs.assessmentDate ASC LIMIT 1")
    Optional<RiskScore> findOldestScore();

    /**
     * Calculates risk score statistics for model performance monitoring.
     * 
     * This method provides comprehensive statistics for risk score
     * distribution analysis, model validation, and regulatory reporting.
     * 
     * @return Object array containing [min, max, avg, count] statistics
     */
    @Query("SELECT MIN(rs.score), MAX(rs.score), AVG(rs.score), COUNT(rs.score) FROM RiskScore rs")
    Object[] findRiskScoreStatistics();

    /**
     * Finds risk scores requiring urgent attention based on category and recency.
     * 
     * This method identifies high-risk scores that are recent and require
     * immediate attention for risk management and compliance purposes.
     * 
     * @param category The risk category to filter by (typically "HIGH")
     * @param cutoffDate The cutoff date for recent assessments
     * @return List of urgent risk scores requiring attention
     */
    @Query("SELECT rs FROM RiskScore rs WHERE rs.category = :category AND rs.assessmentDate >= :cutoffDate ORDER BY rs.score DESC")
    List<RiskScore> findUrgentRiskScores(@Param("category") String category, @Param("cutoffDate") LocalDateTime cutoffDate);
}