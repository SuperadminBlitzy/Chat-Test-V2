package com.ufs.risk.model;

import jakarta.persistence.Entity; // version 3.1.0
import jakarta.persistence.Id; // version 3.1.0
import jakarta.persistence.GeneratedValue; // version 3.1.0
import jakarta.persistence.GenerationType; // version 3.1.0
import jakarta.persistence.Column; // version 3.1.0
import java.time.LocalDateTime; // N/A - Java standard library

/**
 * RiskScore Entity - Core component of the AI-Powered Risk Assessment Engine
 * 
 * This JPA entity represents a calculated risk score for a specific risk profile.
 * It serves as the parent entity for contributing risk factors and stores the
 * numerical score along with the associated risk category.
 * 
 * Business Requirements Addressed:
 * - F-002: AI-Powered Risk Assessment Engine
 * - F-002-RQ-001: Real-time risk scoring (generates risk scores within 500ms)
 * - F-002-RQ-002: Predictive risk modeling (captures output of predictive models)
 * 
 * Technical Specifications:
 * - Risk scores range from 0-1000 scale
 * - Categories: LOW, MEDIUM, HIGH risk classifications
 * - Real-time assessment timestamp tracking
 * - Links to risk profile for comprehensive risk management
 * 
 * Performance Requirements:
 * - Supports 5,000+ risk scoring requests per second
 * - Sub-500ms response time for risk score generation
 * - 95% accuracy rate in risk assessment calculations
 * 
 * @author UFS Development Team
 * @version 1.0
 * @since 2025
 */
@Entity
public class RiskScore {

    /**
     * Primary key identifier for the risk score record
     * Auto-generated using database sequence for optimal performance
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, updatable = false)
    private Long id;

    /**
     * Numerical risk score value on a scale of 0-1000
     * - 0-300: LOW risk category
     * - 301-700: MEDIUM risk category  
     * - 701-1000: HIGH risk category
     * 
     * This field directly stores the real-time risk score generated by the
     * AI-Powered Risk Assessment Engine's predictive models.
     */
    @Column(name = "score", nullable = false)
    private Integer score;

    /**
     * Risk category classification based on the numerical score
     * Possible values: "LOW", "MEDIUM", "HIGH"
     * 
     * This categorization enables quick risk-based decision making
     * for compliance and operational workflows.
     */
    @Column(name = "category", nullable = false, length = 20)
    private String category;

    /**
     * Timestamp when the risk assessment was performed
     * Captures the exact moment of AI model execution for audit trails
     * and regulatory compliance requirements.
     * 
     * Essential for tracking risk score validity periods and 
     * model performance monitoring over time.
     */
    @Column(name = "assessment_date", nullable = false)
    private LocalDateTime assessmentDate;

    /**
     * Foreign key reference to the associated risk profile
     * Links this risk score to the specific customer/entity being assessed
     * 
     * Enables relationship mapping between risk profiles and their
     * corresponding assessment results for comprehensive risk management.
     */
    @Column(name = "risk_profile_id", nullable = false)
    private Long riskProfileId;

    /**
     * Default constructor required by JPA specification
     * Enables entity instantiation by the persistence framework
     * during database record retrieval and object-relational mapping.
     */
    public RiskScore() {
        // JPA requires a no-argument constructor for entity instantiation
        // This constructor is used by the persistence provider
    }

    /**
     * Convenience constructor for creating new risk score instances
     * with all required fields populated.
     * 
     * @param score The numerical risk score (0-1000)
     * @param category The risk category classification
     * @param assessmentDate The timestamp of assessment
     * @param riskProfileId The ID of associated risk profile
     */
    public RiskScore(Integer score, String category, LocalDateTime assessmentDate, Long riskProfileId) {
        this.score = score;
        this.category = category;
        this.assessmentDate = assessmentDate;
        this.riskProfileId = riskProfileId;
    }

    /**
     * Gets the unique identifier for the risk score.
     * 
     * @return The ID of the risk score record
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the unique identifier for the risk score.
     * Generally used by JPA framework during entity persistence.
     * 
     * @param id The unique identifier to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the numerical risk score value.
     * 
     * This score is generated by the AI-Powered Risk Assessment Engine
     * and represents the calculated risk level on a 0-1000 scale.
     * 
     * @return The risk score value (0-1000)
     */
    public Integer getScore() {
        return this.score;
    }

    /**
     * Sets the numerical risk score value.
     * 
     * Should be validated to ensure it falls within the acceptable
     * range of 0-1000 before persistence.
     * 
     * @param score The risk score value to set (0-1000)
     */
    public void setScore(Integer score) {
        this.score = score;
    }

    /**
     * Gets the risk category classification.
     * 
     * @return The risk category (e.g., LOW, MEDIUM, HIGH)
     */
    public String getCategory() {
        return this.category;
    }

    /**
     * Sets the risk category classification.
     * 
     * Category should correspond to the numerical score ranges:
     * - LOW: 0-300
     * - MEDIUM: 301-700  
     * - HIGH: 701-1000
     * 
     * @param category The risk category to set
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Gets the date and time when the risk assessment was performed.
     * 
     * This timestamp is crucial for:
     * - Audit trail compliance
     * - Risk score validity tracking
     * - Model performance monitoring
     * - Regulatory reporting requirements
     * 
     * @return The timestamp of the assessment
     */
    public LocalDateTime getAssessmentDate() {
        return this.assessmentDate;
    }

    /**
     * Sets the date and time of the risk assessment.
     * 
     * Typically set to the current timestamp when the AI model
     * completes risk score calculation.
     * 
     * @param assessmentDate The timestamp to set
     */
    public void setAssessmentDate(LocalDateTime assessmentDate) {
        this.assessmentDate = assessmentDate;
    }

    /**
     * Gets the ID of the associated risk profile.
     * 
     * This establishes the relationship between the risk score
     * and the specific customer or entity being assessed.
     * 
     * @return The ID of the risk profile linked to this score
     */
    public Long getRiskProfileId() {
        return this.riskProfileId;
    }

    /**
     * Sets the ID of the associated risk profile.
     * 
     * This creates the link between the risk assessment result
     * and the customer/entity risk profile being evaluated.
     * 
     * @param riskProfileId The risk profile ID to associate
     */
    public void setRiskProfileId(Long riskProfileId) {
        this.riskProfileId = riskProfileId;
    }

    /**
     * Provides a string representation of the RiskScore entity
     * for debugging and logging purposes.
     * 
     * @return String representation of the risk score
     */
    @Override
    public String toString() {
        return "RiskScore{" +
                "id=" + id +
                ", score=" + score +
                ", category='" + category + '\'' +
                ", assessmentDate=" + assessmentDate +
                ", riskProfileId=" + riskProfileId +
                '}';
    }

    /**
     * Checks equality based on the unique identifier.
     * Two RiskScore entities are considered equal if they have the same ID.
     * 
     * @param obj The object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        RiskScore riskScore = (RiskScore) obj;
        return id != null && id.equals(riskScore.id);
    }

    /**
     * Generates hash code based on the unique identifier.
     * 
     * @return hash code for the entity
     */
    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }
}