# =============================================================================
# Spring Boot Development Configuration for Transaction Service
# =============================================================================
# This configuration file provides development-specific settings for the
# transaction-service microservice within the Unified Financial Services Platform.
# It overrides base application.yml with local development optimizations.
# =============================================================================

server:
  port: 8083
  servlet:
    context-path: /api/v1/transactions
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: on_param
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024

# =============================================================================
# Spring Framework Configuration
# =============================================================================
spring:
  application:
    name: transaction-service
  
  # Development Profile Configuration
  profiles:
    active: dev
    
  # Configuration Server Integration
  config:
    import: optional:configserver:http://localhost:8888
    
  # PostgreSQL Database Configuration
  # Supporting F-001: Unified Data Integration Platform requirements
  datasource:
    url: jdbc:postgresql://localhost:5432/ufs_transaction_dev
    username: postgres
    password: password
    driver-class-name: org.postgresql.Driver
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      # Connection pool configuration based on PostgreSQL Connection Pool specs
      pool-name: TransactionServiceHikariCP
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 30000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      connection-test-query: SELECT 1
      auto-commit: false
      
  # JPA/Hibernate Configuration
  jpa:
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
          order_inserts: true
          order_updates: true
        connection:
          provider_disables_autocommit: true
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
        generate_statistics: true
        session:
          events:
            log:
              LOG_QUERIES_SLOWER_THAN_MS: 100
    open-in-view: false
    
  # Apache Kafka Configuration for Event-Driven Architecture
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: transaction-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.ufs.transaction.events"
        max.poll.records: 500
        enable.auto.commit: false
        session.timeout.ms: 30000
        heartbeat.interval.ms: 3000
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        max.request.size: 1048576
        retries: 3
        acks: all
        enable.idempotence: true
        batch.size: 16384
        linger.ms: 5
        compression.type: snappy
    listener:
      ack-mode: manual_immediate
      concurrency: 3
      
  # Redis Configuration for Caching
  redis:
    host: localhost
    port: 6379
    database: 0
    timeout: 2000ms
    jedis:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 2
        max-wait: 2000ms
        
  # Transaction Management Configuration
  transaction:
    default-timeout: 30
    rollback-on-commit-failure: true
    
  # Jackson JSON Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
      write-date-timestamps-as-nanoseconds: false
    deserialization:
      fail-on-unknown-properties: false
      accept-single-value-as-array: true
    default-property-inclusion: non_null
    time-zone: UTC
    
  # Spring Security Configuration (Development Mode)
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/auth/realms/ufs-dev
    user:
      name: dev-user
      password: dev-password
      roles: ADMIN,USER,TRANSACTION_MANAGER

# =============================================================================
# Service Discovery Configuration (Eureka)
# =============================================================================
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
    instance-info-replication-interval-seconds: 30
    initial-instance-info-replication-interval-seconds: 40
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    metadata-map:
      version: 1.0.0
      environment: development
      service-type: transaction-processor

# =============================================================================
# Application-Specific Configuration
# =============================================================================
transaction:
  service:
    # Transaction Processing Configuration
    processing:
      batch-size: 100
      retry-attempts: 3
      timeout-seconds: 30
      max-concurrent-transactions: 1000
      
    # Risk Assessment Integration
    risk-assessment:
      enabled: true
      endpoint: http://localhost:8084/api/v1/risk
      timeout-ms: 500
      circuit-breaker:
        failure-threshold: 5
        recovery-time-ms: 30000
        
    # Compliance Integration
    compliance:
      audit-enabled: true
      real-time-monitoring: true
      regulatory-reporting: true
      
    # Blockchain Settlement Configuration
    blockchain:
      enabled: false  # Disabled in development
      network: hyperledger-fabric-dev
      channel: transaction-channel
      
    # Transaction Limits (Development Values)
    limits:
      daily-limit: 1000000.00
      single-transaction-limit: 100000.00
      velocity-check-enabled: true

# =============================================================================
# Monitoring and Health Configuration
# =============================================================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,configprops,beans,mappings
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    db:
      enabled: true
    redis:
      enabled: true
    kafka:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.95,0.99
      sla:
        http.server.requests: 100ms,500ms,1s
        
info:
  application:
    name: '@project.name@'
    description: Transaction Service for Unified Financial Services Platform
    version: '@project.version@'
    encoding: '@project.build.sourceEncoding@'
    java:
      version: '@java.version@'

# =============================================================================
# Logging Configuration
# =============================================================================
logging:
  level:
    com.ufs.transaction: DEBUG
    org.springframework.web: INFO
    org.springframework.security: DEBUG
    org.springframework.transaction: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.apache.kafka: INFO
    com.zaxxer.hikari: DEBUG
    io.micrometer: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  file:
    name: logs/transaction-service-dev.log
    max-size: 100MB
    max-history: 30

# =============================================================================
# Development-Specific Features
# =============================================================================
debug: true

# H2 Console Configuration (for development database inspection)
# Note: Only enabled in development, never in production
h2:
  console:
    enabled: false  # Using PostgreSQL, not H2

# Development Tools Configuration
spring.devtools:
  restart:
    enabled: true
    additional-paths: src/main/java
  livereload:
    enabled: true