# Production Configuration for Transaction Service
# Financial Services Platform - Production Environment
# Version: 1.0.0
# Last Updated: 2025-06-14

server:
  port: 8083
  # Production server optimizations
  tomcat:
    max-threads: 200
    max-connections: 8192
    accept-count: 100
    connection-timeout: 20000
    max-http-form-post-size: 2MB
    max-swallow-size: 2MB
  # Enable compression for production
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  # Security headers
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false

spring:
  application:
    name: transaction-service
  
  # Centralized configuration with Spring Cloud Config
  config:
    import: optional:configserver:http://config-server:8888
  
  # Production PostgreSQL Database Configuration
  datasource:
    url: jdbc:postgresql://postgres-prod:5432/ufs_transaction_db
    username: prod_transaction_user
    password: ${DB_PASSWORD_TRANSACTION}
    driver-class-name: org.postgresql.Driver
    # Production connection pool settings (HikariCP)
    hikari:
      pool-name: TransactionServicePool
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      connection-test-query: SELECT 1
      validation-timeout: 5000
      initialization-fail-timeout: 1
      isolate-internal-queries: false
      allow-pool-suspension: false
      read-only: false
      register-mbeans: true
  
  # Production JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
    show-sql: false
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        use_sql_comments: false
        # Production performance optimizations
        jdbc:
          batch_size: 50
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        # Connection provider settings
        connection:
          provider_disables_autocommit: true
        # Query optimization
        query:
          in_clause_parameter_padding: true
          plan_cache_max_size: 2048
        # Statistics for monitoring
        generate_statistics: true
        session:
          events:
            log:
              LOG_QUERIES_SLOWER_THAN_MS: 1000
  
  # Production Kafka Configuration
  kafka:
    bootstrap-servers: kafka-prod-1:9092,kafka-prod-2:9092,kafka-prod-3:9092
    # Producer configuration for high throughput
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      # Production performance settings
      acks: all
      retries: 2147483647
      max-in-flight-requests-per-connection: 5
      enable-idempotence: true
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      compression-type: snappy
      properties:
        spring.json.add.type.headers: false
        # Security and reliability
        security.protocol: SASL_SSL
        sasl.mechanism: PLAIN
        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_USERNAME}" password="${KAFKA_PASSWORD}";
        # Delivery timeout
        delivery.timeout.ms: 120000
        request.timeout.ms: 30000
    
    # Consumer configuration for reliable processing
    consumer:
      group-id: transaction-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      # Production consumer settings
      enable-auto-commit: false
      auto-offset-reset: earliest
      max-poll-records: 500
      max-poll-interval-ms: 300000
      session-timeout-ms: 10000
      heartbeat-interval-ms: 3000
      fetch-min-size: 1024
      fetch-max-wait: 500
      properties:
        spring.json.trusted.packages: com.ufs.transaction.event
        # Security settings
        security.protocol: SASL_SSL
        sasl.mechanism: PLAIN
        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_USERNAME}" password="${KAFKA_PASSWORD}";
        # Consumer reliability
        isolation.level: read_committed
        allow.auto.create.topics: false
    
    # Additional Kafka settings
    admin:
      properties:
        security.protocol: SASL_SSL
        sasl.mechanism: PLAIN
        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_USERNAME}" password="${KAFKA_PASSWORD}";
  
  # Production Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://auth-service:9000
          # Production JWT configuration
          jwk-set-uri: http://auth-service:9000/.well-known/jwks.json
          cache-duration: PT5M
          clockskew: PT1M
  
  # Production thread pool configuration
  task:
    execution:
      pool:
        core-size: 8
        max-size: 20
        queue-capacity: 100
        keep-alive: 60s
      thread-name-prefix: transaction-exec-
    scheduling:
      pool:
        size: 5
      thread-name-prefix: transaction-sched-

# Production Eureka Client Configuration
eureka:
  client:
    serviceUrl:
      defaultZone: http://discovery-service:8761/eureka/
    # Production service discovery settings
    healthcheck:
      enabled: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    registry-fetch-interval-seconds: 30
    eureka-service-url-poll-interval-seconds: 300
    eureka-server-read-timeout-seconds: 8
    eureka-server-connect-timeout-seconds: 5
    eureka-server-total-connections: 200
    eureka-server-total-connections-per-host: 50
    eureka-connection-idle-timeout-seconds: 30
    heartbeat-executor-thread-pool-size: 2
    heartbeat-executor-exponential-back-off-bound: 10
    cache-refresh-executor-thread-pool-size: 2
    cache-refresh-executor-exponential-back-off-bound: 10
  instance:
    prefer-ip-address: true
    # Production instance configuration
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    metadata-map:
      version: 1.0.0
      environment: production
      management.context-path: /actuator
    # Health check configuration
    health-check-url-path: /actuator/health
    status-page-url-path: /actuator/info
    home-page-url-path: /

# Production Logging Configuration
logging:
  level:
    root: INFO
    com.ufs.transaction: INFO
    org.springframework.web: WARN
    org.hibernate: WARN
    org.springframework.security: WARN
    org.springframework.kafka: WARN
    # Database logging
    org.springframework.jdbc.core: WARN
    org.springframework.orm.jpa: WARN
    # Circuit breaker logging
    io.github.resilience4j: INFO
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{36} - %msg%n'
    file: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{36} - %msg%n'
  file:
    name: /var/log/transaction-service/application.log
    max-size: 100MB
    max-history: 30
    total-size-cap: 3GB

# Production Management and Monitoring Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
      base-path: /actuator
  endpoint:
    health:
      probes:
        enabled: true
      show-details: when-authorized
      show-components: when-authorized
    info:
      enabled: true
    prometheus:
      enabled: true
    metrics:
      enabled: true
  # Production metrics configuration
  metrics:
    enabled: true
    export:
      prometheus:
        enabled: true
        step: PT1M
        descriptions: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.9,0.95,0.99
      slo:
        http.server.requests: 10ms,50ms,100ms,200ms,500ms,1s,2s,5s,10s
    tags:
      application: transaction-service
      environment: production
  # Production tracing configuration
  tracing:
    sampling:
      probability: 0.1
  # Health indicators
  health:
    probes:
      enabled: true
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    db:
      enabled: true
    diskspace:
      enabled: true
    kafka:
      enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

# Production Resilience Configuration
resilience4j:
  # Circuit breaker configuration for external services
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        ringBufferSizeInClosedState: 100
        ringBufferSizeInHalfOpenState: 10
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
        recordExceptions:
          - java.util.concurrent.TimeoutException
          - java.io.IOException
          - org.springframework.web.client.ResourceAccessException
        ignoreExceptions:
          - java.lang.IllegalArgumentException
    instances:
      riskAssessmentService:
        registerHealthIndicator: true
        slidingWindowSize: 100
        minimumNumberOfCalls: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 2s
        automaticTransitionFromOpenToHalfOpenEnabled: true
      paymentGateway:
        registerHealthIndicator: true
        slidingWindowSize: 50
        minimumNumberOfCalls: 10
        permittedNumberOfCallsInHalfOpenState: 3
        failureRateThreshold: 60
        waitDurationInOpenState: 60s
        slowCallRateThreshold: 60
        slowCallDurationThreshold: 3s
  
  # Retry configuration
  retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 100ms
        retryExceptions:
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.ResourceAccessException
        ignoreExceptions:
          - java.lang.IllegalArgumentException
    instances:
      paymentGateway:
        maxAttempts: 3
        waitDuration: 100ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.ResourceAccessException
      databaseQuery:
        maxAttempts: 2
        waitDuration: 50ms
        retryExceptions:
          - org.springframework.dao.TransientDataAccessException
  
  # Rate limiter configuration
  ratelimiter:
    configs:
      default:
        registerHealthIndicator: true
        limitForPeriod: 100
        limitRefreshPeriod: 1s
        timeoutDuration: 0
    instances:
      transactionProcessing:
        limitForPeriod: 1000
        limitRefreshPeriod: 1s
        timeoutDuration: 100ms
  
  # Bulkhead configuration
  bulkhead:
    configs:
      default:
        maxConcurrentCalls: 25
        maxWaitDuration: 20ms
    instances:
      riskAssessment:
        maxConcurrentCalls: 10
        maxWaitDuration: 10ms

# Application-specific configuration
app:
  transaction:
    # Production transaction processing settings
    processing:
      batch-size: 100
      timeout: 30s
      retry-attempts: 3
    # Risk assessment thresholds
    risk:
      high-value-threshold: 10000.00
      velocity-check-enabled: true
      fraud-check-enabled: true
    # Audit configuration
    audit:
      enabled: true
      async: true
      include-request-body: true
      include-response-body: false
      retention-days: 2555 # 7 years for financial compliance
  
  # Cache configuration
  cache:
    redis:
      enabled: true
      host: redis-prod
      port: 6379
      password: ${REDIS_PASSWORD}
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: 2000ms
  
  # Security configuration
  security:
    cors:
      allowed-origins: 
        - https://app.ufs.com
        - https://admin.ufs.com
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: "*"
      allow-credentials: true
      max-age: 3600
    
    # Rate limiting
    rate-limit:
      enabled: true
      requests-per-minute: 1000
      burst-capacity: 1500