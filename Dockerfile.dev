# Development Dockerfile for Next.js Web Application
# Uses Node.js 20 Alpine for lightweight base image with development optimizations
# Supports hot-reloading, TypeScript compilation, and development dependencies

# Base image: Node.js 20 LTS Alpine for development environment
# Alpine version chosen for smaller footprint and faster container startup
FROM node:20-alpine

# Set working directory inside the container
# All subsequent commands will be executed from this directory
WORKDIR /app

# Install system dependencies required for Node.js native modules
# These packages are often needed for development dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && ln -sf python3 /usr/bin/python

# Copy package.json and package-lock.json first for better Docker layer caching
# This allows Docker to cache the npm install step when only source code changes
COPY package*.json ./

# Install all dependencies including devDependencies for development environment
# --no-cache prevents npm from caching packages locally to reduce image size
# Development dependencies are required for TypeScript compilation, linting, testing
RUN npm install && npm cache clean --force

# Create non-root user for security best practices
# Even in development, running as non-root is recommended
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001 -G nodejs

# Copy the entire application source code
# This enables hot-reloading functionality in development mode
COPY --chown=nextjs:nodejs . .

# Switch to non-root user for running the application
USER nextjs

# Expose port 3000 - default Next.js development server port
# This port will be used for the development server with hot-reloading
EXPOSE 3000

# Health check to ensure the development server is running properly
# This helps with container orchestration and debugging
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Default command to start the Next.js development server
# npm run dev enables hot-reloading, fast refresh, and development optimizations
# Using array syntax for better signal handling and process management
CMD ["npm", "run", "dev"]

# Development-specific labels for container metadata
LABEL maintainer="development-team@financial-services.com"
LABEL environment="development"
LABEL application="financial-services-web"
LABEL version="dev"
LABEL framework="nextjs"
LABEL runtime="nodejs-20"
LABEL description="Development container for Next.js web application with hot-reloading support"