# Docker Compose configuration for Financial Services Web Application Development Environment
# This file defines the complete local development stack for the Next.js web application
# Built for enterprise-grade development with hot-reloading, debugging, and monitoring capabilities
# Compliant with financial services security and development standards

version: '3.8'

# Define the services that make up the development environment
services:
  # Primary web application service for Next.js development
  web:
    # Build configuration using development-optimized Dockerfile
    build:
      context: .
      dockerfile: Dockerfile.dev
      # Build arguments for development optimization
      args:
        - NODE_ENV=development
        - BUILD_TARGET=development
        - ENABLE_DEBUG=true
    
    # Container name for easier identification and management
    container_name: financial-services-web-dev
    
    # Port mapping for development server access
    # Maps host port 3000 to container port 3000 (Next.js default)
    ports:
      - "3000:3000"
      # Additional port for webpack dev server (if needed)
      - "3001:3001"
      # Debug port for Node.js debugging
      - "9229:9229"
    
    # Volume mounts for hot-reloading and development efficiency
    volumes:
      # Source code mounting for real-time updates
      - ./src:/app/src
      - ./public:/app/public
      - ./pages:/app/pages
      - ./components:/app/components
      - ./styles:/app/styles
      - ./lib:/app/lib
      - ./utils:/app/utils
      - ./hooks:/app/hooks
      - ./context:/app/context
      - ./types:/app/types
      
      # Configuration files for development
      - ./.env.local:/app/.env.local
      - ./.env.development:/app/.env.development
      - ./next.config.js:/app/next.config.js
      - ./tailwind.config.js:/app/tailwind.config.js
      - ./tsconfig.json:/app/tsconfig.json
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      
      # Development tools configuration
      - ./.eslintrc.json:/app/.eslintrc.json
      - ./.prettierrc:/app/.prettierrc
      - ./jest.config.js:/app/jest.config.js
      - ./cypress.config.js:/app/cypress.config.js
      
      # Node modules cache for faster rebuilds (named volume)
      - node_modules_cache:/app/node_modules
      
      # Next.js cache directory for optimized builds
      - next_cache:/app/.next
    
    # Environment variables for development configuration
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOSTNAME=0.0.0.0
      
      # Next.js specific development settings
      - NEXT_TELEMETRY_DISABLED=1
      - FAST_REFRESH=true
      - WATCHPACK_POLLING=true
      
      # Development debugging and logging
      - DEBUG=*
      - LOG_LEVEL=debug
      - ENABLE_CONSOLE_LOGS=true
      
      # Hot reloading configuration
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=300
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3000
      
      # Development API configuration
      - API_BASE_URL=http://localhost:8080
      - INTERNAL_API_URL=http://api-gateway:8080
      
      # Security settings for development
      - DISABLE_SSL_VERIFY=true
      - ENABLE_CORS=true
      - CORS_ORIGIN=http://localhost:3000
      
      # Financial services specific development settings
      - ENABLE_MOCK_APIS=true
      - MOCK_PAYMENT_GATEWAY=true
      - ENABLE_DEBUG_TOOLS=true
      - DISABLE_RATE_LIMITING=true
      
      # Performance monitoring in development
      - ENABLE_PERFORMANCE_MONITORING=true
      - PERFORMANCE_SAMPLING_RATE=1.0
      
      # TypeScript and build optimization
      - TS_NODE_COMPILER_OPTIONS={"module":"commonjs"}
      - TYPESCRIPT_BUILD_MODE=development
      
      # Memory and resource settings for development
      - NODE_OPTIONS=--max_old_space_size=4096 --inspect=0.0.0.0:9229
      - UV_THREADPOOL_SIZE=8
    
    # Development-specific resource limits
    deploy:
      resources:
        limits:
          # Generous limits for development with debugging
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health check configuration for development monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    
    # Restart policy for development stability
    restart: unless-stopped
    
    # Dependency management - starts after required services
    depends_on:
      - redis-dev
      - postgres-dev
    
    # Network configuration for inter-service communication
    networks:
      - financial-services-dev
    
    # Security settings for development environment
    security_opt:
      - no-new-privileges:true
    
    # User configuration for security (matches Dockerfile.dev)
    user: "1001:1001"
    
    # Working directory override if needed
    working_dir: /app
    
    # Development-specific labels for container management
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-dev.rule=Host(`localhost`)"
      - "traefik.http.routers.web-dev.entrypoints=web"
      - "traefik.http.services.web-dev.loadbalancer.server.port=3000"
      - "dev.environment=development"
      - "dev.service=web-frontend"
      - "dev.framework=nextjs"
      - "dev.version=14"
      - "financial-services.component=web-ui"
      - "financial-services.tier=frontend"

  # Redis service for development caching and session storage
  redis-dev:
    image: redis:7.2-alpine
    container_name: financial-services-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
      - ./docker/redis/redis-dev.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=dev_password_change_in_production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - financial-services-dev
    labels:
      - "dev.environment=development"
      - "dev.service=cache-storage"
      - "financial-services.component=cache"

  # PostgreSQL service for development database
  postgres-dev:
    image: postgres:16-alpine
    container_name: financial-services-postgres-dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/conf:/etc/postgresql/conf.d
    environment:
      - POSTGRES_DB=financial_services_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password_change_in_production
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - POSTGRES_HOST_AUTH_METHOD=md5
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d financial_services_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - financial-services-dev
    security_opt:
      - no-new-privileges:true
    labels:
      - "dev.environment=development"
      - "dev.service=primary-database"
      - "financial-services.component=database"

  # Development tools container for utilities and debugging
  dev-tools:
    image: node:20-alpine
    container_name: financial-services-dev-tools
    volumes:
      - .:/workspace
      - dev_tools_cache:/root/.cache
    working_dir: /workspace
    command: tail -f /dev/null
    environment:
      - NODE_ENV=development
    networks:
      - financial-services-dev
    profiles:
      - tools
    labels:
      - "dev.environment=development"
      - "dev.service=development-tools"
      - "financial-services.component=dev-utilities"

# Named volumes for persistent data and caching
volumes:
  # Node modules cache to speed up container rebuilds
  node_modules_cache:
    driver: local
    labels:
      - "dev.volume=node-modules-cache"
      - "financial-services.data-type=build-cache"
  
  # Next.js build cache for faster development builds
  next_cache:
    driver: local
    labels:
      - "dev.volume=nextjs-build-cache"
      - "financial-services.data-type=build-artifacts"
  
  # Redis development data persistence
  redis_dev_data:
    driver: local
    labels:
      - "dev.volume=redis-data"
      - "financial-services.data-type=cache-storage"
  
  # PostgreSQL development data persistence
  postgres_dev_data:
    driver: local
    labels:
      - "dev.volume=postgres-data"
      - "financial-services.data-type=database-storage"
  
  # Development tools cache
  dev_tools_cache:
    driver: local
    labels:
      - "dev.volume=dev-tools-cache"
      - "financial-services.data-type=tools-cache"

# Custom network for service communication
networks:
  financial-services-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    labels:
      - "dev.network=financial-services-development"
      - "financial-services.environment=development"

# Development-specific configuration overrides
# These can be activated with docker-compose profiles
x-development-overrides:
  # Performance profiling configuration
  &performance-profiling
  environment:
    - ENABLE_PROFILING=true
    - PROFILING_SAMPLE_RATE=0.1
    - ENABLE_MEMORY_PROFILING=true
  
  # Extended logging configuration
  &extended-logging
  logging:
    driver: "json-file"
    options:
      max-size: "100m"
      max-file: "5"
      labels: "dev.service,financial-services.component"
  
  # Security scanning configuration
  &security-scanning
  security_opt:
    - no-new-privileges:true
    - seccomp:unconfined
    - apparmor:unconfined