# Unified Financial Services Platform - Local Development Environment
# Docker Compose configuration for microservices architecture with backing services
# Implements enterprise patterns for financial services development

version: '3.8'

# Network configuration for service communication
networks:
  ufs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.financialservices.network=ufs-platform"
      - "com.financialservices.environment=development"

# Persistent volume definitions for data storage
volumes:
  # Database volumes with backup labels
  postgres-data:
    driver: local
    labels:
      - "com.financialservices.backup=daily"
      - "com.financialservices.retention=30days"
  
  mongo-data:
    driver: local
    labels:
      - "com.financialservices.backup=daily"
      - "com.financialservices.retention=30days"
  
  redis-data:
    driver: local
    labels:
      - "com.financialservices.backup=weekly"
      - "com.financialservices.retention=7days"
  
  influxdb-data:
    driver: local
    labels:
      - "com.financialservices.backup=daily"
      - "com.financialservices.retention=90days"
  
  # Application volumes
  grafana-data:
    driver: local
    labels:
      - "com.financialservices.backup=weekly"
  
  config-server-data:
    driver: local
    labels:
      - "com.financialservices.backup=daily"

services:
  # ===========================================
  # INFRASTRUCTURE SERVICES
  # ===========================================
  
  # Configuration Management Service
  config-server:
    image: ufs/config-server:latest
    container_name: ufs-config-server
    build:
      context: ./config-server
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=config-server"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=infrastructure"
    ports:
      - "8888:8888"
    environment:
      # Server configuration
      - SERVER_PORT=8888
      - SPRING_PROFILES_ACTIVE=development,local
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_CONFIG=DEBUG
      
      # Git repository configuration for externalized config
      - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=file:///config
      - SPRING_CLOUD_CONFIG_SERVER_GIT_DEFAULT_LABEL=main
      - SPRING_CLOUD_CONFIG_SERVER_GIT_CLONE_ON_START=true
      
      # Security configuration
      - SPRING_SECURITY_USER_NAME=config_admin
      - SPRING_SECURITY_USER_PASSWORD=config_secret_2024
      - MANAGEMENT_SECURITY_ENABLED=true
      
      # JVM optimization for development
      - JAVA_OPTS=-Xms256m -Xmx512m -XX:+UseG1GC -XX:+UseStringDeduplication
    volumes:
      - config-server-data:/config
      - ./config-files:/config:ro
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8888"
      - "prometheus.io/path=/actuator/prometheus"

  # Service Discovery and Registry
  discovery-service:
    image: ufs/discovery-service:latest
    container_name: ufs-discovery-service
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=discovery-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=infrastructure"
    ports:
      - "8761:8761"
    environment:
      # Eureka server configuration
      - SERVER_PORT=8761
      - SPRING_PROFILES_ACTIVE=development,local
      - EUREKA_INSTANCE_HOSTNAME=discovery-service
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false
      - EUREKA_SERVER_EVICTION_INTERVAL_TIMER_IN_MS=15000
      
      # Configuration server integration
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      - SPRING_CLOUD_CONFIG_FAIL_FAST=true
      - SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL=3000
      
      # Management and monitoring
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true
      
      # JVM optimization
      - JAVA_OPTS=-Xms256m -Xmx512m -XX:+UseG1GC
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8761"
      - "prometheus.io/path=/actuator/prometheus"

  # API Gateway and Load Balancer
  api-gateway:
    image: ufs/api-gateway:latest
    container_name: ufs-api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=api-gateway"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=edge"
    ports:
      - "8080:8080"
    environment:
      # Gateway configuration
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=development,local
      
      # Service discovery integration
      - DISCOVERY_SERVICE_URL=http://discovery-service:8761/eureka
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${DISCOVERY_SERVICE_URL}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=10
      
      # Configuration server integration
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      - SPRING_CLOUD_CONFIG_FAIL_FAST=true
      
      # Rate limiting and security
      - SPRING_CLOUD_GATEWAY_FILTER_RATE_LIMIT_ENABLED=true
      - SPRING_CLOUD_GATEWAY_FILTER_RATE_LIMIT_REDIS_URL=redis://redis:6379
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://auth-service:9000/.well-known/jwks.json
      
      # Circuit breaker configuration
      - RESILIENCE4J_CIRCUITBREAKER_INSTANCES_DEFAULT_FAILURE_RATE_THRESHOLD=50
      - RESILIENCE4J_CIRCUITBREAKER_INSTANCES_DEFAULT_WAIT_DURATION_IN_OPEN_STATE=10000
      - RESILIENCE4J_TIMELIMITER_INSTANCES_DEFAULT_TIMEOUT_DURATION=3000
      
      # CORS configuration for development
      - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORS_CONFIGURATIONS_[/**]_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORS_CONFIGURATIONS_[/**]_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORS_CONFIGURATIONS_[/**]_ALLOWED_HEADERS=*
      
      # JVM optimization
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+UseG1GC -XX:+UseStringDeduplication
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/actuator/prometheus"

  # ===========================================
  # CORE BUSINESS SERVICES
  # ===========================================

  # Authentication and Authorization Service
  auth-service:
    image: ufs/auth-service:latest
    container_name: ufs-auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=auth-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=core"
    ports:
      - "9000:9000"
    environment:
      # Service configuration
      - SERVER_PORT=9000
      - SPRING_PROFILES_ACTIVE=development,local
      
      # Service discovery integration
      - DISCOVERY_SERVICE_URL=http://discovery-service:8761/eureka
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${DISCOVERY_SERVICE_URL}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      
      # Configuration server integration
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      
      # Database configuration
      - POSTGRES_URL=jdbc:postgresql://postgres:5432/auth_db
      - SPRING_DATASOURCE_URL=${POSTGRES_URL}
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      
      # JPA and Hibernate configuration
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=true
      
      # OAuth2 and JWT configuration
      - SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_JWT_ISSUER_URI=http://auth-service:9000
      - SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_JWT_ACCESS_TOKEN_TIME_TO_LIVE=PT1H
      - SPRING_SECURITY_OAUTH2_AUTHORIZATION_SERVER_JWT_REFRESH_TOKEN_TIME_TO_LIVE=P30D
      
      # Redis for session management
      - SPRING_SESSION_STORE_TYPE=redis
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_DATABASE=1
      
      # Multi-factor authentication
      - UFS_SECURITY_MFA_ENABLED=true
      - UFS_SECURITY_MFA_TOTP_ISSUER=UFS-Platform
      - UFS_SECURITY_MFA_SMS_PROVIDER=twilio
      
      # Password policy configuration
      - UFS_SECURITY_PASSWORD_MIN_LENGTH=12
      - UFS_SECURITY_PASSWORD_REQUIRE_SPECIAL_CHARS=true
      - UFS_SECURITY_PASSWORD_REQUIRE_NUMBERS=true
      - UFS_SECURITY_PASSWORD_REQUIRE_UPPERCASE=true
      
      # JVM optimization
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+UseG1GC
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9000"
      - "prometheus.io/path=/actuator/prometheus"

  # Customer Management Service
  customer-service:
    image: ufs/customer-service:latest
    container_name: ufs-customer-service
    build:
      context: ./customer-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=customer-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=core"
    ports:
      - "8081:8081"
    environment:
      # Service configuration
      - SERVER_PORT=8081
      - SPRING_PROFILES_ACTIVE=development,local
      
      # Service discovery integration
      - DISCOVERY_SERVICE_URL=http://discovery-service:8761/eureka
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${DISCOVERY_SERVICE_URL}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      
      # Configuration server integration
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      
      # PostgreSQL database configuration
      - POSTGRES_URL=jdbc:postgresql://postgres:5432/customer_db
      - SPRING_DATASOURCE_URL=${POSTGRES_URL}
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      
      # MongoDB configuration for customer profiles
      - MONGO_URL=mongodb://mongo:27017/customer_profiles
      - SPRING_DATA_MONGODB_URI=${MONGO_URL}
      - SPRING_DATA_MONGODB_DATABASE=customer_profiles
      
      # JPA configuration
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      
      # KYC and compliance configuration
      - UFS_CUSTOMER_KYC_ENABLED=true
      - UFS_CUSTOMER_KYC_DOCUMENT_RETENTION_DAYS=2555  # 7 years
      - UFS_CUSTOMER_AML_SCREENING_ENABLED=true
      - UFS_CUSTOMER_PEP_SCREENING_ENABLED=true
      
      # Data encryption configuration
      - UFS_SECURITY_ENCRYPTION_ALGORITHM=AES-256-GCM
      - UFS_SECURITY_ENCRYPTION_KEY_ID=customer-data-key-2024
      
      # API rate limiting
      - UFS_RATELIMIT_ENABLED=true
      - UFS_RATELIMIT_REQUESTS_PER_MINUTE=1000
      
      # JVM optimization
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+UseG1GC
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8081"
      - "prometheus.io/path=/actuator/prometheus"

  # Transaction Processing Service
  transaction-service:
    image: ufs/transaction-service:latest
    container_name: ufs-transaction-service
    build:
      context: ./transaction-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=transaction-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=core"
    ports:
      - "8082:8082"
    environment:
      # Service configuration
      - SERVER_PORT=8082
      - SPRING_PROFILES_ACTIVE=development,local
      
      # Service discovery integration
      - DISCOVERY_SERVICE_URL=http://discovery-service:8761/eureka
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${DISCOVERY_SERVICE_URL}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      
      # Configuration server integration
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      
      # Database configuration
      - POSTGRES_URL=jdbc:postgresql://postgres:5432/transaction_db
      - SPRING_DATASOURCE_URL=${POSTGRES_URL}
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      
      # Kafka configuration for event streaming
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.apache.kafka.common.serialization.JsonSerializer
      - SPRING_KAFKA_CONSUMER_GROUP_ID=transaction-service-group
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      
      # Transaction processing configuration
      - UFS_TRANSACTION_MAX_AMOUNT_PER_TRANSACTION=100000
      - UFS_TRANSACTION_MAX_DAILY_AMOUNT=500000
      - UFS_TRANSACTION_FRAUD_DETECTION_ENABLED=true
      - UFS_TRANSACTION_REAL_TIME_PROCESSING=true
      
      # Circuit breaker configuration
      - RESILIENCE4J_CIRCUITBREAKER_INSTANCES_PAYMENT_PROCESSOR_FAILURE_RATE_THRESHOLD=60
      - RESILIENCE4J_CIRCUITBREAKER_INSTANCES_PAYMENT_PROCESSOR_WAIT_DURATION_IN_OPEN_STATE=30s
      
      # Observability configuration
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1.0
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://jaeger:14268/api/traces
      
      # JVM optimization
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+UseG1GC
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8082"
      - "prometheus.io/path=/actuator/prometheus"

  # Risk Assessment Service
  risk-assessment-service:
    image: ufs/risk-assessment-service:latest
    container_name: ufs-risk-assessment-service
    build:
      context: ./risk-assessment-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=risk-assessment-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=core"
    ports:
      - "8083:8083"
    environment:
      # Service configuration
      - SERVER_PORT=8083
      - SPRING_PROFILES_ACTIVE=development,local
      
      # Service discovery integration
      - DISCOVERY_SERVICE_URL=http://discovery-service:8761/eureka
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${DISCOVERY_SERVICE_URL}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      
      # Configuration server integration
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      
      # Kafka configuration for real-time events
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      
      # AI/ML service integration
      - AI_SERVICE_URL=http://ai-service:5000
      - UFS_RISK_AI_MODEL_ENDPOINT=${AI_SERVICE_URL}/api/v1/risk-model
      - UFS_RISK_AI_TIMEOUT_SECONDS=5
      
      # Risk assessment configuration
      - UFS_RISK_ASSESSMENT_REAL_TIME_ENABLED=true
      - UFS_RISK_ASSESSMENT_BATCH_PROCESSING_ENABLED=true
      - UFS_RISK_ASSESSMENT_MODEL_VERSION=v2.1.0
      - UFS_RISK_ASSESSMENT_THRESHOLD_LOW=300
      - UFS_RISK_ASSESSMENT_THRESHOLD_MEDIUM=600
      - UFS_RISK_ASSESSMENT_THRESHOLD_HIGH=800
      
      # External credit bureau integration
      - UFS_CREDIT_BUREAU_ENABLED=true
      - UFS_CREDIT_BUREAU_ENDPOINT=https://api.experian.com/sandbox
      - UFS_CREDIT_BUREAU_TIMEOUT_SECONDS=10
      
      # Compliance and auditing
      - UFS_RISK_AUDIT_ENABLED=true
      - UFS_RISK_AUDIT_RETENTION_DAYS=2555  # 7 years for regulatory compliance
      
      # JVM optimization
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+UseG1GC
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
      ai-service:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8083"
      - "prometheus.io/path=/actuator/prometheus"

  # Compliance and Regulatory Service
  compliance-service:
    image: ufs/compliance-service:latest
    container_name: ufs-compliance-service
    build:
      context: ./compliance-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=compliance-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=core"
    ports:
      - "8084:8084"
    environment:
      # Service configuration
      - SERVER_PORT=8084
      - SPRING_PROFILES_ACTIVE=development,local
      
      # Service discovery integration
      - DISCOVERY_SERVICE_URL=http://discovery-service:8761/eureka
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${DISCOVERY_SERVICE_URL}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      
      # Configuration server integration
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      
      # Kafka configuration for compliance events
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      
      # Regulatory compliance configuration
      - UFS_COMPLIANCE_REGULATIONS_ENABLED=PCI-DSS,SOX,GDPR,BASEL-IV
      - UFS_COMPLIANCE_AML_SCREENING_ENABLED=true
      - UFS_COMPLIANCE_KYC_VALIDATION_ENABLED=true
      - UFS_COMPLIANCE_TRANSACTION_MONITORING_ENABLED=true
      
      # Regulatory reporting configuration
      - UFS_COMPLIANCE_REPORTING_ENABLED=true
      - UFS_COMPLIANCE_REPORTING_SCHEDULE=0 0 2 * * *  # Daily at 2 AM
      - UFS_COMPLIANCE_REPORTING_RETENTION_YEARS=7
      
      # Data privacy and GDPR
      - UFS_COMPLIANCE_GDPR_ENABLED=true
      - UFS_COMPLIANCE_GDPR_DATA_RETENTION_DAYS=1825  # 5 years
      - UFS_COMPLIANCE_GDPR_RIGHT_TO_DELETION_ENABLED=true
      
      # Audit trail configuration
      - UFS_COMPLIANCE_AUDIT_ENABLED=true
      - UFS_COMPLIANCE_AUDIT_IMMUTABLE_STORAGE=true
      - UFS_COMPLIANCE_AUDIT_DIGITAL_SIGNATURE=true
      
      # JVM optimization
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+UseG1GC
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8084"
      - "prometheus.io/path=/actuator/prometheus"

  # Analytics and Business Intelligence Service
  analytics-service:
    image: ufs/analytics-service:latest
    container_name: ufs-analytics-service
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=analytics-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=analytics"
    ports:
      - "8085:8085"
    environment:
      # Service configuration
      - SERVER_PORT=8085
      - SPRING_PROFILES_ACTIVE=development,local
      
      # Service discovery integration
      - DISCOVERY_SERVICE_URL=http://discovery-service:8761/eureka
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${DISCOVERY_SERVICE_URL}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      
      # Configuration server integration
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      
      # InfluxDB configuration for time-series data
      - INFLUXDB_URL=http://influxdb:8086
      - SPRING_INFLUX_URL=${INFLUXDB_URL}
      - SPRING_INFLUX_DATABASE=financial_metrics
      - SPRING_INFLUX_USERNAME=admin
      - SPRING_INFLUX_PASSWORD=admin123
      
      # Kafka configuration for real-time analytics
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      
      # Analytics configuration
      - UFS_ANALYTICS_REAL_TIME_PROCESSING=true
      - UFS_ANALYTICS_BATCH_PROCESSING_ENABLED=true
      - UFS_ANALYTICS_BATCH_SIZE=1000
      - UFS_ANALYTICS_PROCESSING_INTERVAL_SECONDS=60
      
      # Business metrics configuration
      - UFS_ANALYTICS_METRICS_CUSTOMER_LIFETIME_VALUE=true
      - UFS_ANALYTICS_METRICS_CHURN_PREDICTION=true
      - UFS_ANALYTICS_METRICS_FRAUD_PATTERNS=true
      - UFS_ANALYTICS_METRICS_REVENUE_FORECASTING=true
      
      # Data warehouse integration
      - UFS_ANALYTICS_WAREHOUSE_ENABLED=true
      - UFS_ANALYTICS_WAREHOUSE_SYNC_SCHEDULE=0 0 1 * * *  # Daily at 1 AM
      
      # JVM optimization
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+UseG1GC
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8085"
      - "prometheus.io/path=/actuator/prometheus"

  # Financial Wellness and Advisory Service
  financial-wellness-service:
    image: ufs/financial-wellness-service:latest
    container_name: ufs-financial-wellness-service
    build:
      context: ./financial-wellness-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=financial-wellness-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=business"
    ports:
      - "8086:8086"
    environment:
      # Service configuration
      - SERVER_PORT=8086
      - SPRING_PROFILES_ACTIVE=development,local
      
      # Service discovery integration
      - DISCOVERY_SERVICE_URL=http://discovery-service:8761/eureka
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${DISCOVERY_SERVICE_URL}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      
      # Configuration server integration
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=${CONFIG_SERVER_URL}
      
      # MongoDB configuration for wellness data
      - MONGO_URL=mongodb://mongo:27017/wellness_db
      - SPRING_DATA_MONGODB_URI=${MONGO_URL}
      - SPRING_DATA_MONGODB_DATABASE=wellness_db
      
      # Financial wellness configuration
      - UFS_WELLNESS_GOAL_TRACKING_ENABLED=true
      - UFS_WELLNESS_BUDGETING_ENABLED=true
      - UFS_WELLNESS_EXPENSE_CATEGORIZATION=true
      - UFS_WELLNESS_INVESTMENT_ADVICE=true
      
      # Recommendation engine configuration
      - UFS_WELLNESS_RECOMMENDATIONS_ENABLED=true
      - UFS_WELLNESS_RECOMMENDATIONS_ML_ENABLED=true
      - UFS_WELLNESS_RECOMMENDATIONS_UPDATE_FREQUENCY=daily
      
      # Gamification features
      - UFS_WELLNESS_GAMIFICATION_ENABLED=true
      - UFS_WELLNESS_ACHIEVEMENTS_ENABLED=true
      - UFS_WELLNESS_SOCIAL_FEATURES_ENABLED=false  # Disabled for privacy
      
      # JVM optimization
      - JAVA_OPTS=-Xms256m -Xmx512m -XX:+UseG1GC
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8086"
      - "prometheus.io/path=/actuator/prometheus"

  # ===========================================
  # SPECIALIZED SERVICES
  # ===========================================

  # AI/ML Service for Intelligence and Predictions
  ai-service:
    image: ufs/ai-service:latest
    container_name: ufs-ai-service
    build:
      context: ./ai-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=ai-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=intelligence"
    ports:
      - "5000:5000"
    environment:
      # Python Flask configuration
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - FLASK_APP=app.py
      - HOST=0.0.0.0
      - PORT=5000
      
      # ML model configuration
      - MODEL_VERSION=v2.1.0
      - MODEL_PATH=/app/models
      - MODEL_REFRESH_INTERVAL_HOURS=24
      
      # TensorFlow/PyTorch configuration
      - CUDA_VISIBLE_DEVICES=""  # CPU only for development
      - TF_CPP_MIN_LOG_LEVEL=2
      - PYTHONUNBUFFERED=1
      
      # ML pipeline configuration
      - UFS_ML_FRAUD_DETECTION_ENABLED=true
      - UFS_ML_CREDIT_SCORING_ENABLED=true
      - UFS_ML_CHURN_PREDICTION_ENABLED=true
      - UFS_ML_RECOMMENDATION_ENGINE_ENABLED=true
      
      # Model performance monitoring
      - UFS_ML_MONITORING_ENABLED=true
      - UFS_ML_DRIFT_DETECTION_ENABLED=true
      - UFS_ML_BIAS_MONITORING_ENABLED=true
      
      # Data processing configuration
      - UFS_ML_BATCH_SIZE=128
      - UFS_ML_MAX_PREDICTION_TIME_SECONDS=2
      - UFS_ML_FEATURE_STORE_ENABLED=true
      
      # Security and compliance
      - UFS_ML_MODEL_ENCRYPTION_ENABLED=true
      - UFS_ML_AUDIT_PREDICTIONS=true
      - UFS_ML_EXPLAINABLE_AI_ENABLED=true
    volumes:
      - ./ai-service/models:/app/models:ro
      - ./ai-service/data:/app/data
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=5000"
      - "prometheus.io/path=/metrics"

  # Blockchain and Distributed Ledger Service
  blockchain-service:
    image: ufs/blockchain-service:latest
    container_name: ufs-blockchain-service
    build:
      context: ./blockchain-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=blockchain-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=infrastructure"
    ports:
      - "3000:3000"
    environment:
      # Node.js configuration
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      
      # Hyperledger Fabric configuration
      - FABRIC_NETWORK_NAME=ufs-network
      - FABRIC_CHANNEL_NAME=financial-channel
      - FABRIC_CHAINCODE_NAME=financial-contracts
      - FABRIC_MSP_ID=UFS-MSP
      
      # Blockchain network configuration
      - BLOCKCHAIN_NETWORK_TYPE=hyperledger-fabric
      - BLOCKCHAIN_CONSENSUS_ALGORITHM=RAFT
      - BLOCKCHAIN_BLOCK_SIZE=100
      - BLOCKCHAIN_BLOCK_TIME_SECONDS=2
      
      # Smart contract configuration
      - UFS_CONTRACTS_PAYMENT_SETTLEMENT=enabled
      - UFS_CONTRACTS_IDENTITY_VERIFICATION=enabled
      - UFS_CONTRACTS_COMPLIANCE_AUTOMATION=enabled
      - UFS_CONTRACTS_AUDIT_TRAIL=enabled
      
      # Security configuration
      - UFS_BLOCKCHAIN_ENCRYPTION_ENABLED=true
      - UFS_BLOCKCHAIN_DIGITAL_SIGNATURES=ECDSA
      - UFS_BLOCKCHAIN_HASH_ALGORITHM=SHA-256
      
      # Integration configuration
      - UFS_BLOCKCHAIN_EXTERNAL_APIS_ENABLED=true
      - UFS_BLOCKCHAIN_WEBHOOK_NOTIFICATIONS=true
      - UFS_BLOCKCHAIN_REAL_TIME_SYNC=true
      
      # Performance configuration
      - UFS_BLOCKCHAIN_CONNECTION_POOL_SIZE=20
      - UFS_BLOCKCHAIN_TRANSACTION_TIMEOUT_SECONDS=30
      - UFS_BLOCKCHAIN_RETRY_ATTEMPTS=3
      
      # Monitoring and logging
      - LOG_LEVEL=info
      - UFS_BLOCKCHAIN_METRICS_ENABLED=true
      - UFS_BLOCKCHAIN_TRANSACTION_LOGGING=true
    volumes:
      - ./blockchain-service/crypto-config:/app/crypto-config:ro
      - ./blockchain-service/channel-artifacts:/app/channel-artifacts:ro
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3000"
      - "prometheus.io/path=/metrics"

  # Notification and Communication Service
  notification-service:
    image: ufs/notification-service:latest
    container_name: ufs-notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      labels:
        - "com.financialservices.service=notification-service"
        - "com.financialservices.version=1.0.0"
        - "com.financialservices.tier=communication"
    ports:
      - "3001:3001"
    environment:
      # Node.js configuration
      - NODE_ENV=development
      - PORT=3001
      - HOST=0.0.0.0
      
      # Kafka configuration for event-driven notifications
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLIENT_ID=notification-service
      - KAFKA_CONSUMER_GROUP_ID=notification-consumer-group
      
      # Notification channels configuration
      - UFS_NOTIFICATIONS_EMAIL_ENABLED=true
      - UFS_NOTIFICATIONS_SMS_ENABLED=true
      - UFS_NOTIFICATIONS_PUSH_ENABLED=true
      - UFS_NOTIFICATIONS_WEBHOOK_ENABLED=true
      
      # Email service configuration (SMTP)
      - SMTP_HOST=smtp.mailtrap.io
      - SMTP_PORT=2525
      - SMTP_SECURE=false
      - SMTP_USER=development_user
      - SMTP_PASS=development_pass
      
      # SMS service configuration
      - SMS_PROVIDER=twilio
      - TWILIO_ACCOUNT_SID=development_sid
      - TWILIO_AUTH_TOKEN=development_token
      - TWILIO_PHONE_NUMBER=+1234567890
      
      # Push notification configuration
      - PUSH_PROVIDER=firebase
      - FIREBASE_SERVER_KEY=development_key
      - FIREBASE_PROJECT_ID=ufs-development
      
      # Template and personalization
      - UFS_NOTIFICATIONS_TEMPLATES_ENABLED=true
      - UFS_NOTIFICATIONS_PERSONALIZATION=true
      - UFS_NOTIFICATIONS_LOCALIZATION=true
      - UFS_NOTIFICATIONS_DEFAULT_LANGUAGE=en
      
      # Delivery and retry configuration
      - UFS_NOTIFICATIONS_RETRY_ATTEMPTS=3
      - UFS_NOTIFICATIONS_RETRY_DELAY_SECONDS=30
      - UFS_NOTIFICATIONS_BATCH_SIZE=100
      - UFS_NOTIFICATIONS_RATE_LIMIT_PER_MINUTE=1000
      
      # Compliance and privacy
      - UFS_NOTIFICATIONS_GDPR_COMPLIANCE=true
      - UFS_NOTIFICATIONS_OPT_OUT_ENABLED=true
      - UFS_NOTIFICATIONS_AUDIT_ENABLED=true
      
      # Monitoring and logging
      - LOG_LEVEL=info
      - UFS_NOTIFICATIONS_METRICS_ENABLED=true
      - UFS_NOTIFICATIONS_DELIVERY_TRACKING=true
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3001"
      - "prometheus.io/path=/metrics"

  # ===========================================
  # DATA STORAGE SERVICES
  # ===========================================

  # PostgreSQL Database for Transactional Data
  postgres:
    image: postgres:16
    container_name: ufs-postgres
    ports:
      - "5432:5432"
    environment:
      # Database configuration
      - POSTGRES_DB=ufs_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=auth_db,customer_db,transaction_db
      
      # Performance configuration
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
      - POSTGRES_HOST_AUTH_METHOD=md5
      
      # Memory and performance tuning
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database-init/init-postgresql.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database-init/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d ufs_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "com.financialservices.backup=enabled"
      - "com.financialservices.backup.frequency=daily"
      - "com.financialservices.backup.retention=30days"

  # MongoDB for Document Storage and Customer Profiles
  mongo:
    image: mongo:7.0
    container_name: ufs-mongodb
    ports:
      - "27017:27017"
    environment:
      # Authentication configuration
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=admin
      
      # Performance configuration
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/var/log/mongodb
    volumes:
      - mongo-data:/data/db
      - ./database-init/init-mongodb.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./database-init/mongod.conf:/etc/mongod.conf:ro
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    command: ["mongod", "--config", "/etc/mongod.conf"]
    labels:
      - "com.financialservices.backup=enabled"
      - "com.financialservices.backup.frequency=daily"
      - "com.financialservices.backup.retention=30days"

  # Redis for Caching and Session Management
  redis:
    image: redis:7.2
    container_name: ufs-redis
    ports:
      - "6379:6379"
    environment:
      # Redis configuration
      - REDIS_PASSWORD=redis_password_2024
      - REDIS_DATABASES=16
      - REDIS_MAXMEMORY=512mb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    volumes:
      - redis-data:/data
      - ./database-init/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--requirepass", "redis_password_2024"]
    labels:
      - "com.financialservices.backup=enabled"
      - "com.financialservices.backup.frequency=weekly"
      - "com.financialservices.backup.retention=7days"

  # InfluxDB for Time-Series Data and Metrics
  influxdb:
    image: influxdb:2.7
    container_name: ufs-influxdb
    ports:
      - "8086:8086"
    environment:
      # InfluxDB 2.x configuration
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123456
      - DOCKER_INFLUXDB_INIT_ORG=ufs-platform
      - DOCKER_INFLUXDB_INIT_BUCKET=financial_metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=ufs-development-token-2024
      
      # Performance configuration
      - INFLUXD_ENGINE_PATH=/var/lib/influxdb2/engine
      - INFLUXD_BOLT_PATH=/var/lib/influxdb2/influxd.bolt
      - INFLUXD_REPORTING_DISABLED=false
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - ./database-init/influxdb-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "com.financialservices.backup=enabled"
      - "com.financialservices.backup.frequency=daily"
      - "com.financialservices.backup.retention=90days"

  # ===========================================
  # MESSAGE STREAMING SERVICES
  # ===========================================

  # Apache Zookeeper for Kafka Coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: ufs-zookeeper
    ports:
      - "2181:2181"
    environment:
      # Zookeeper configuration
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=10
      - ZOOKEEPER_SYNC_LIMIT=5
      - ZOOKEEPER_MAX_CLIENT_CNXNS=100
      
      # JVM configuration
      - KAFKA_HEAP_OPTS=-Xmx512m -Xms512m
      - KAFKA_JVM_PERFORMANCE_OPTS=-XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35
      
      # Logging configuration
      - ZOOKEEPER_LOG4J_ROOT_LOGLEVEL=INFO
      - ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL=ERROR
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=jmx"

  # Apache Kafka for Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: ufs-kafka
    ports:
      - "9092:9092"
      - "9101:9101"  # JMX port for monitoring
    environment:
      # Kafka broker configuration
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      
      # Topic configuration
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_NUM_PARTITIONS=3
      
      # Performance configuration
      - KAFKA_HEAP_OPTS=-Xmx1g -Xms1g
      - KAFKA_JVM_PERFORMANCE_OPTS=-XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35
      - KAFKA_LOG_RETENTION_HOURS=168  # 7 days
      - KAFKA_LOG_SEGMENT_BYTES=1073741824  # 1GB
      - KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS=300000
      
      # Message configuration
      - KAFKA_MESSAGE_MAX_BYTES=10000000  # 10MB
      - KAFKA_REPLICA_FETCH_MAX_BYTES=10000000
      - KAFKA_COMPRESSION_TYPE=snappy
      
      # Producer configuration
      - KAFKA_PRODUCER_COMPRESSION_TYPE=snappy
      - KAFKA_PRODUCER_BATCH_SIZE=16384
      - KAFKA_PRODUCER_LINGER_MS=5
      
      # Consumer configuration
      - KAFKA_CONSUMER_FETCH_MIN_BYTES=1
      - KAFKA_CONSUMER_FETCH_MAX_WAIT_MS=500
      
      # JMX monitoring
      - KAFKA_JMX_PORT=9101
      - KAFKA_JMX_HOSTNAME=localhost
      
      # Logging configuration
      - KAFKA_LOG4J_ROOT_LOGLEVEL=INFO
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=jmx"
      - "com.financialservices.monitoring.jmx.port=9101"

  # ===========================================
  # OBSERVABILITY AND MONITORING
  # ===========================================

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: ufs-jaeger
    ports:
      - "6831:6831/udp"  # Jaeger agent UDP port
      - "6832:6832/udp"  # Jaeger agent UDP port
      - "14250:14250"    # gRPC port
      - "14268:14268"    # HTTP port for spans
      - "16686:16686"    # Jaeger UI
    environment:
      # Jaeger configuration
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      - QUERY_BASE_PATH=/jaeger
      
      # Storage configuration (in-memory for development)
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=50000
      
      # UI configuration
      - JAEGER_AGENT_HOST=localhost
      - JAEGER_AGENT_PORT=6831
      
      # Sampling configuration
      - SAMPLING_STRATEGIES_FILE=/etc/jaeger/sampling_strategies.json
    volumes:
      - ./monitoring/jaeger/sampling_strategies.json:/etc/jaeger/sampling_strategies.json:ro
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=jaeger"

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: ufs-prometheus
    ports:
      - "9090:9090"
    environment:
      # Prometheus configuration
      - PROMETHEUS_RETENTION_TIME=30d
      - PROMETHEUS_RETENTION_SIZE=10GB
      - PROMETHEUS_CONFIG_FILE=/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=prometheus"

  # Grafana for Visualization and Dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: ufs-grafana
    ports:
      - "3002:3000"
    environment:
      # Grafana configuration
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      
      # Database configuration (using PostgreSQL)
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana_db
      - GF_DATABASE_USER=admin
      - GF_DATABASE_PASSWORD=password
      
      # Session configuration
      - GF_SESSION_PROVIDER=redis
      - GF_SESSION_PROVIDER_CONFIG=addr=redis:6379,pool_size=100,prefix=grafana:session:
      
      # Security configuration
      - GF_SECURITY_SECRET_KEY=grafana_secret_key_2024
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=false  # Set to true in production with HTTPS
      
      # SMTP configuration for alerting
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.mailtrap.io:2525
      - GF_SMTP_USER=development_user
      - GF_SMTP_PASSWORD=development_pass
      - GF_SMTP_FROM_ADDRESS=grafana@ufs-platform.local
      
      # Provisioning configuration
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      
      # Plugin configuration
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      
      # Feature toggles
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ufs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "com.financialservices.monitoring=grafana"

# ===========================================
# ADDITIONAL CONFIGURATIONS
# ===========================================

# Shared volume for Prometheus data
x-prometheus-data: &prometheus-data
  prometheus-data:
    driver: local
    labels:
      - "com.financialservices.backup=weekly"
      - "com.financialservices.retention=90days"

# Logging driver configuration for centralized logging
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "5"
    labels: "com.financialservices.service"

# Common environment variables for all services
x-common-variables: &common-variables
  TZ: UTC
  JAVA_TOOL_OPTIONS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=80.0"
  LOGGING_PATTERN_CONSOLE: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,metrics,prometheus"
  MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
  MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true

# Security labels for all containers
x-security-labels: &security-labels
  - "com.financialservices.security.scanning=enabled"
  - "com.financialservices.security.compliance=PCI-DSS,SOX,GDPR"
  - "com.financialservices.security.encryption=AES-256"