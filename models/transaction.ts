/**
 * TypeScript interfaces and types for transaction-related data models
 * Used throughout the web application for financial transaction management
 * 
 * This file defines the core data structures for financial transactions,
 * status tracking, filtering, pagination, and API response structures
 * aligned with the backend data models and transaction processing workflow.
 * 
 * @fileoverview Transaction data models for financial services platform
 * @version 1.0.0
 * @author Financial Services Platform Team
 */

/**
 * Enumeration of possible transaction statuses following the transaction processing workflow
 * Represents the lifecycle states of a financial transaction from initiation to completion
 * 
 * Status Flow: INITIATED -> VALIDATED -> PROCESSED -> COMPLETED | FAILED
 */
export enum TransactionStatus {
  /**
   * Initial state when a transaction request is received
   * Transaction has been created but not yet validated
   */
  INITIATED = 'INITIATED',
  
  /**
   * Transaction has passed initial validation checks
   * Data validation, format checking, and business rules have been verified
   */
  VALIDATED = 'VALIDATED',
  
  /**
   * Transaction is being processed through the settlement system
   * Risk assessment completed and transaction approved for processing
   */
  PROCESSED = 'PROCESSED',
  
  /**
   * Transaction has been successfully completed
   * Settlement confirmed and all parties notified
   */
  COMPLETED = 'COMPLETED',
  
  /**
   * Transaction has failed at any stage of processing
   * Could be due to validation errors, insufficient funds, or system failures
   */
  FAILED = 'FAILED'
}

/**
 * Core Transaction interface representing a single financial transaction record
 * Contains all essential information for transaction processing and tracking
 * 
 * This interface aligns with the unified data platform's transaction data model
 * and supports the AI-powered risk assessment engine's requirements
 */
export interface Transaction {
  /**
   * Unique identifier for the transaction
   * Generated by the system and used for tracking and audit purposes
   */
  transactionId: string;
  
  /**
   * Identifier of the account initiating or receiving the transaction
   * Links to the customer account in the unified data platform
   */
  accountId: string;
  
  /**
   * Transaction amount in the base currency unit
   * Must be positive for debits, can be negative for reversals
   */
  amount: number;
  
  /**
   * ISO 4217 currency code (e.g., 'USD', 'EUR', 'GBP')
   * Used for multi-currency transaction support
   */
  currencyCode: string;
  
  /**
   * Type of transaction (e.g., 'TRANSFER', 'PAYMENT', 'WITHDRAWAL', 'DEPOSIT')
   * Used for categorization and business logic processing
   */
  transactionType: string;
  
  /**
   * Human-readable description of the transaction
   * Provided by the user or system-generated based on transaction type
   */
  description: string;
  
  /**
   * ISO 8601 formatted timestamp of when the transaction was initiated
   * Used for transaction ordering and time-based analytics
   */
  transactionDate: string;
  
  /**
   * Current status of the transaction
   * Tracks the transaction through its lifecycle states
   */
  status: TransactionStatus;
  
  /**
   * Unique reference number for external tracking
   * May be used for reconciliation with external systems
   */
  referenceNumber: string;
  
  /**
   * Exchange rate applied for cross-currency transactions
   * Set to 1.0 for same-currency transactions
   */
  exchangeRate: number;
  
  /**
   * Account identifier of the counterparty in the transaction
   * Optional field, used for transfer-type transactions
   */
  counterpartyAccountId: string;
  
  /**
   * Transaction category for classification and analytics
   * Used for spending analysis and budgeting features
   */
  category: string;
}

/**
 * Interface for filtering transaction data in queries and searches
 * Supports complex filtering scenarios for transaction history and analytics
 * 
 * Used by the API layer to construct database queries and by the UI
 * for advanced search and filtering capabilities
 */
export interface TransactionFilters {
  /**
   * Filter transactions from this date (inclusive)
   * ISO 8601 formatted date string
   */
  startDate?: string;
  
  /**
   * Filter transactions to this date (inclusive)
   * ISO 8601 formatted date string
   */
  endDate?: string;
  
  /**
   * Filter by specific transaction status
   * Optional field for status-based filtering
   */
  status?: TransactionStatus;
  
  /**
   * Filter by specific transaction type
   * Optional field for type-based filtering
   */
  transactionType?: string;
  
  /**
   * Filter transactions with amount greater than or equal to this value
   * Used for amount range filtering
   */
  minAmount?: number;
  
  /**
   * Filter transactions with amount less than or equal to this value
   * Used for amount range filtering
   */
  maxAmount?: number;
}

/**
 * Interface for pagination metadata in API responses
 * Supports efficient data loading and navigation through large transaction sets
 * 
 * Follows standard pagination patterns for consistent user experience
 * across the application
 */
export interface Pagination {
  /**
   * Current page number (1-based indexing)
   * Used for pagination navigation
   */
  page: number;
  
  /**
   * Number of items per page
   * Configurable limit for result set size
   */
  limit: number;
  
  /**
   * Total number of items matching the query
   * Used for pagination calculations and UI display
   */
  total: number;
  
  /**
   * Total number of pages available
   * Calculated based on total items and limit
   */
  totalPages: number;
}

/**
 * Interface for category-based transaction analytics
 * Provides aggregated data for spending analysis and reporting
 * 
 * Used by the analytics dashboard and reporting features
 * to display transaction breakdowns by category
 */
export interface CategoryBreakdown {
  /**
   * Transaction category name
   * Corresponds to the category field in Transaction interface
   */
  category: string;
  
  /**
   * Total amount for all transactions in this category
   * Sum of all transaction amounts for the category
   */
  totalAmount: number;
  
  /**
   * Number of transactions in this category
   * Count of individual transactions
   */
  transactionCount: number;
}

/**
 * Interface for structured API response containing transaction data
 * Provides a consistent response format for transaction list endpoints
 * 
 * Includes transaction data, pagination information, and optional
 * aggregation data for enhanced user experience and analytics
 */
export interface TransactionResponse {
  /**
   * Array of transaction records matching the query
   * Main payload containing the requested transaction data
   */
  transactions: Transaction[];
  
  /**
   * Pagination metadata for the response
   * Contains information about current page, total items, etc.
   */
  pagination: Pagination;
  
  /**
   * Optional aggregation data for the transaction set
   * May include summary statistics, category breakdowns, or other analytics
   * Structure varies based on the specific endpoint and query parameters
   */
  aggregations?: {
    /**
     * Total amount across all transactions in the result set
     */
    totalAmount?: number;
    
    /**
     * Count of transactions by status
     */
    statusCounts?: Record<TransactionStatus, number>;
    
    /**
     * Category breakdown for the transaction set
     */
    categoryBreakdowns?: CategoryBreakdown[];
    
    /**
     * Average transaction amount
     */
    averageAmount?: number;
    
    /**
     * Date range of the transactions
     */
    dateRange?: {
      earliest: string;
      latest: string;
    };
  };
}

/**
 * Type alias for transaction ID
 * Provides type safety for transaction identifier operations
 */
export type TransactionId = string;

/**
 * Type alias for account ID
 * Provides type safety for account identifier operations
 */
export type AccountId = string;

/**
 * Union type for supported currency codes
 * Extensible list of supported currencies in the system
 */
export type CurrencyCode = 'USD' | 'EUR' | 'GBP' | 'JPY' | 'CAD' | 'AUD' | 'CHF' | 'CNY';

/**
 * Union type for supported transaction types
 * Defines the allowed transaction types in the system
 */
export type TransactionType = 
  | 'TRANSFER' 
  | 'PAYMENT' 
  | 'WITHDRAWAL' 
  | 'DEPOSIT' 
  | 'REFUND' 
  | 'REVERSAL' 
  | 'FEE' 
  | 'INTEREST' 
  | 'DIVIDEND';

/**
 * Union type for transaction categories
 * Used for transaction classification and analytics
 */
export type TransactionCategory = 
  | 'FOOD_DINING'
  | 'TRANSPORTATION'
  | 'SHOPPING'
  | 'ENTERTAINMENT'
  | 'BILLS_UTILITIES'
  | 'HEALTHCARE'
  | 'EDUCATION'
  | 'TRAVEL'
  | 'BUSINESS'
  | 'INVESTMENT'
  | 'INSURANCE'
  | 'CHARITY'
  | 'OTHER';

/**
 * Interface for transaction creation request
 * Used when initiating new transactions through the API
 */
export interface CreateTransactionRequest {
  accountId: string;
  amount: number;
  currencyCode: CurrencyCode;
  transactionType: TransactionType;
  description: string;
  counterpartyAccountId?: string;
  category?: TransactionCategory;
  referenceNumber?: string;
}

/**
 * Interface for transaction update request
 * Used for updating existing transaction details
 */
export interface UpdateTransactionRequest {
  description?: string;
  category?: TransactionCategory;
  referenceNumber?: string;
}

/**
 * Interface for transaction search parameters
 * Extended filtering capabilities for complex transaction queries
 */
export interface TransactionSearchParams extends TransactionFilters {
  /**
   * Search term for description or reference number
   */
  searchTerm?: string;
  
  /**
   * Account IDs to include in search
   */
  accountIds?: string[];
  
  /**
   * Currency codes to filter by
   */
  currencycodes?: CurrencyCode[];
  
  /**
   * Transaction categories to filter by
   */
  categories?: TransactionCategory[];
  
  /**
   * Sort field for ordering results
   */
  sortBy?: 'transactionDate' | 'amount' | 'status' | 'category';
  
  /**
   * Sort direction
   */
  sortOrder?: 'asc' | 'desc';
}

/**
 * Interface for transaction analytics summary
 * Provides high-level metrics for transaction data
 */
export interface TransactionAnalytics {
  /**
   * Total transaction volume
   */
  totalVolume: number;
  
  /**
   * Total number of transactions
   */
  totalCount: number;
  
  /**
   * Average transaction amount
   */
  averageAmount: number;
  
  /**
   * Breakdown by transaction status
   */
  statusBreakdown: Record<TransactionStatus, number>;
  
  /**
   * Breakdown by transaction type
   */
  typeBreakdown: Record<string, number>;
  
  /**
   * Category breakdown
   */
  categoryBreakdown: CategoryBreakdown[];
  
  /**
   * Time period for the analytics
   */
  period: {
    startDate: string;
    endDate: string;
  };
}