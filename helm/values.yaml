# =============================================================================
# Unified Financial Services Platform - Helm Chart Values
# =============================================================================
# This file provides centralized configuration for all backend microservices
# and their dependencies within the Kubernetes environment.
# Values can be overridden during deployment for different environments.
# =============================================================================

# Global Configuration
global:
  # Container Registry Configuration
  imageRegistry: "docker.io"
  imagePullPolicy: IfNotPresent
  
  # Storage Configuration  
  storageClass: "standard"
  
  # Security Context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault
  
  # Network Policies
  networkPolicy:
    enabled: true
    ingress: []
    egress: []
  
  # External Services Configuration
  kafka:
    brokers: "kafka:9092"
    security:
      protocol: "SASL_SSL"
      mechanism: "PLAIN"
    
  redis:
    host: "redis-master"
    port: 6379
    password: ""
    database: 0
    sentinel:
      enabled: false
      master: "mymaster"
    
  postgresql:
    host: "postgresql"
    port: 5432
    username: "postgres"
    password: ""
    sslMode: "require"
    pool:
      size: 20
      maxOverflow: 30
      timeout: 30
      recycle: 3600
      prePing: true
    
  mongodb:
    host: "mongodb"
    port: 27017
    username: ""
    password: ""
    authDatabase: "admin"
    replicaSet: "rs0"
    
  influxdb:
    host: "influxdb"
    port: 8086
    token: ""
    organization: "financial-services"
    bucket: "metrics"

# Default Values (can be inherited by all microservices)
replicaCount: 1
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Service Account Configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: false

# Pod Configuration
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/actuator/prometheus"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

# Default Service Configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations: {}

# Default Ingress Configuration
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

# Default Resource Configuration
resources:
  requests:
    cpu: "250m"
    memory: "512Mi"
  limits:
    cpu: "500m"
    memory: "1Gi"

# Horizontal Pod Autoscaler Configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: "50%"

# Node Selection and Scheduling
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - ufs-platform
          topologyKey: kubernetes.io/hostname

# =============================================================================
# MICROSERVICES CONFIGURATION
# =============================================================================

# API Gateway Service
api-gateway:
  enabled: true
  replicaCount: 2
  image:
    repository: ufs/api-gateway
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: LoadBalancer
    port: 8080
    targetPort: 8080
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
  
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rate-limit: "1000"
      nginx.ingress.kubernetes.io/rate-limit-window: "1m"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: api.ufs.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: api-ufs-tls
        hosts:
          - api.ufs.com
  
  config:
    rateLimit:
      enabled: true
      requestsPerSecond: 1000
    cors:
      enabled: true
      allowedOrigins: "*"
      allowedMethods: "GET,POST,PUT,DELETE,OPTIONS"
    timeout:
      connect: 5s
      response: 30s

# Service Discovery Service  
discovery-service:
  enabled: true
  replicaCount: 1
  image:
    repository: ufs/discovery-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8761
    targetPort: 8761
  
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1Gi"
  
  config:
    eurekaServer:
      enableSelfPreservation: false
      renewalPercentThreshold: 0.85
      evictionIntervalTimerInMs: 4000

# Configuration Server
config-server:
  enabled: true
  replicaCount: 1
  image:
    repository: ufs/config-server
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8888
    targetPort: 8888
  
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1Gi"
  
  config:
    git:
      uri: "https://github.com/ufs/config-repo"
      searchPaths: "config/{application}/{profile}"
      timeout: 10
    security:
      user:
        name: "admin"
        password: ""

# Authentication Service
auth-service:
  enabled: true
  replicaCount: 2
  image:
    repository: ufs/auth-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 9000
    targetPort: 9000
  
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  database:
    name: "auth_db"
    host: "postgresql"
    port: 5432
    username: "auth_user"
    password: ""
  
  config:
    jwt:
      secret: ""
      expiration: 3600
      refreshExpiration: 86400
    oauth2:
      clients: []
    security:
      bcrypt:
        rounds: 12

# Customer Service
customer-service:
  enabled: true
  replicaCount: 2
  image:
    repository: ufs/customer-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8081
    targetPort: 8081
  
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 15
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 80
  
  database:
    name: "customer_db"
    host: "postgresql"
    port: 5432
    username: "customer_user"
    password: ""
  
  config:
    kyc:
      enabled: true
      providers:
        - name: "jumio"
          endpoint: ""
          apiKey: ""
    cache:
      enabled: true
      ttl: 300

# Risk Assessment Service
risk-assessment-service:
  enabled: true
  replicaCount: 1
  image:
    repository: ufs/risk-assessment-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8082
    targetPort: 8082
  
  resources:
    requests:
      cpu: "1000m"
      memory: "2Gi"
    limits:
      cpu: "2000m"
      memory: "4Gi"
  
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 75
  
  config:
    ml:
      modelPath: "/models"
      tensorflowVersion: "2.15"
      batchSize: 32
      timeout: 30000
    risk:
      scoreThreshold: 0.75
      categories:
        - low
        - medium
        - high
        - critical

# Compliance Service
compliance-service:
  enabled: true
  replicaCount: 1
  image:
    repository: ufs/compliance-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8083
    targetPort: 8083
  
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"
  
  config:
    regulatory:
      frameworks:
        - basel3
        - basel4
        - psd3
        - gdpr
        - sox
      updateInterval: "24h"
    monitoring:
      enabled: true
      alertThreshold: 0.95

# Transaction Service
transaction-service:
  enabled: true
  replicaCount: 2
  image:
    repository: ufs/transaction-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8084
    targetPort: 8084
  
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  config:
    processing:
      batchSize: 1000
      timeout: 5000
      retryAttempts: 3
    validation:
      enabled: true
      strictMode: true

# Analytics Service
analytics-service:
  enabled: true
  replicaCount: 1
  image:
    repository: ufs/analytics-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8085
    targetPort: 8085
  
  resources:
    requests:
      cpu: "1000m"
      memory: "2Gi"
    limits:
      cpu: "2000m"
      memory: "4Gi"
  
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 8
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 80
  
  config:
    spark:
      enabled: true
      executorMemory: "2g"
      driverMemory: "1g"
    streaming:
      windowSize: "5m"
      watermark: "10s"

# Financial Wellness Service
financial-wellness-service:
  enabled: true
  replicaCount: 1
  image:
    repository: ufs/financial-wellness-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 8086
    targetPort: 8086
  
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"
  
  config:
    recommendations:
      enabled: true
      refreshInterval: "1h"
    goals:
      types:
        - savings
        - investment
        - debt-reduction
        - retirement

# AI Service
ai-service:
  enabled: true
  replicaCount: 1
  image:
    repository: ufs/ai-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 5000
    targetPort: 5000
  
  resources:
    requests:
      cpu: "2000m"
      memory: "4Gi"
    limits:
      cpu: "4000m"
      memory: "8Gi"
  
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 75
  
  config:
    models:
      tensorflow:
        version: "2.15"
        gpuEnabled: false
      pytorch:
        version: "2.1"
    inference:
      timeout: 30000
      batchSize: 16
    explainability:
      enabled: true
      method: "shap"

# Blockchain Service
blockchain-service:
  enabled: true
  replicaCount: 1
  image:
    repository: ufs/blockchain-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  resources:
    requests:
      cpu: "1000m"
      memory: "2Gi"
    limits:
      cpu: "2000m"
      memory: "4Gi"
  
  config:
    hyperledger:
      fabric:
        version: "2.5"
        channelName: "financial-channel"
        chaincodeName: "financial-contract"
      network:
        organizations: 3
        peersPerOrg: 2
    consensus:
      algorithm: "raft"
      batchTimeout: "2s"
      maxMessageCount: 100

# Notification Service
notification-service:
  enabled: true
  replicaCount: 1
  image:
    repository: ufs/notification-service
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 3001
    targetPort: 3001
  
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1Gi"
  
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  config:
    channels:
      email:
        enabled: true
        provider: "smtp"
        host: ""
        port: 587
        username: ""
        password: ""
      sms:
        enabled: true
        provider: "twilio"
        accountSid: ""
        authToken: ""
      push:
        enabled: true
        provider: "fcm"
        serverKey: ""
    templates:
      path: "/templates"
      cache: true

# =============================================================================
# MONITORING AND OBSERVABILITY
# =============================================================================

# Prometheus Configuration
prometheus:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 30s
    scrapeTimeout: 10s
  
  rules:
    enabled: true
    namespace: monitoring
    additionalLabels: {}

# Grafana Dashboard Configuration
grafana:
  enabled: true
  dashboards:
    enabled: true
    namespace: monitoring
    configMapAnnotations:
      grafana_folder: "Financial Services"

# Jaeger Tracing Configuration
jaeger:
  enabled: true
  agent:
    host: "jaeger-agent"
    port: 6831
  collector:
    endpoint: "http://jaeger-collector:14268/api/traces"
  
  sampling:
    type: "probabilistic"
    param: 0.1

# Logging Configuration
logging:
  level:
    root: INFO
    com.ufs: DEBUG
  
  logstash:
    enabled: true
    host: "logstash"
    port: 5044
  
  format: json
  includeRequestId: true
  includeMdc: true

# =============================================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# =============================================================================

# Development Environment Overrides
dev:
  global:
    postgresql:
      host: "localhost"
      port: 5432
    mongodb:
      host: "localhost"
      port: 27017
    redis:
      host: "localhost"
      port: 6379
  
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "1Gi"
  
  logging:
    level:
      root: DEBUG

# Staging Environment Overrides  
staging:
  replicaCount: 1
  
  resources:
    requests:
      cpu: "200m"
      memory: "512Mi"
    limits:
      cpu: "1000m"
      memory: "2Gi"
  
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5

# Production Environment Overrides
prod:
  replicaCount: 3
  
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "2000m"
      memory: "4Gi"
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 50
  
  podDisruptionBudget:
    enabled: true
    minAvailable: "50%"
  
  monitoring:
    enabled: true
    alerts:
      enabled: true
  
  backup:
    enabled: true
    schedule: "0 2 * * *"
    retention: "30d"

# =============================================================================
# EXTERNAL DEPENDENCIES
# =============================================================================

# PostgreSQL Configuration
postgresql-ha:
  enabled: false
  postgresql:
    replicaCount: 3
    username: postgres
    database: ufs_platform
    postgresqlConfiguration:
      max_connections: 200
      shared_buffers: 256MB
      effective_cache_size: 1GB
      maintenance_work_mem: 64MB
      checkpoint_completion_target: 0.9
      wal_buffers: 16MB
      default_statistics_target: 100
      random_page_cost: 1.1
      effective_io_concurrency: 200
  
  pgpool:
    adminUsername: admin
    numInitChildren: 32
    maxPool: 4
    childLifeTime: 300
    connectionLifeTime: 0

# MongoDB Configuration
mongodb:
  enabled: false
  architecture: replicaset
  replicaCount: 3
  auth:
    enabled: true
    rootUser: root
    databases:
      - customer_data
      - analytics
      - audit_logs
  
  resources:
    requests:
      memory: 2Gi
      cpu: 1000m
    limits:
      memory: 4Gi
      cpu: 2000m

# Redis Configuration
redis:
  enabled: false
  architecture: replication
  auth:
    enabled: true
  
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 1000m
  
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 8Gi

# Kafka Configuration
kafka:
  enabled: false
  replicaCount: 3
  defaultReplicationFactor: 3
  offsetsTopicReplicationFactor: 3
  transactionStateLogReplicationFactor: 3
  transactionStateLogMinIsr: 2
  
  resources:
    requests:
      memory: 2Gi
      cpu: 1000m
    limits:
      memory: 4Gi
      cpu: 2000m
  
  persistence:
    enabled: true
    size: 50Gi

# InfluxDB Configuration
influxdb:
  enabled: false
  persistence:
    enabled: true
    size: 100Gi
  
  resources:
    requests:
      memory: 2Gi
      cpu: 1000m
    limits:
      memory: 4Gi
      cpu: 2000m