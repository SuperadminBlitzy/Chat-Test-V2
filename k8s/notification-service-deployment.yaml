# Notification Service Deployment for Financial Platform
# This deployment handles email, SMS, and push notifications
# Consumes events from Kafka and integrates with various notification providers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: backend
  labels:
    app: notification-service
    component: backend
    tier: standard
    version: v1.0.0
    environment: production
    criticality: standard
    team: platform
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Notification service for handling user notifications via email, SMS, and push"
    contact: "platform-team@financial-platform.com"
    documentation: "https://docs.financial-platform.com/services/notification-service"
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: notification-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: notification-service
        component: backend
        tier: standard
        version: v1.0.0
        environment: production
        # Service mesh labels for Istio integration
        sidecar.istio.io/inject: "true"
        # Security and compliance labels
        security.financial-platform.com/scan: "true"
        compliance.financial-platform.com/audit: "true"
      annotations:
        # Prometheus monitoring annotations
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
        # Security scanning annotations
        security.financial-platform.com/last-scan: "2024-01-15T10:00:00Z"
        # Configuration versioning
        config.financial-platform.com/configmap-version: "v1.0.0"
        config.financial-platform.com/secret-version: "v1.0.0"
        # Deployment metadata
        deployment.financial-platform.com/deployed-by: "argocd"
        deployment.financial-platform.com/git-commit: "${GIT_COMMIT_SHA}"
        deployment.financial-platform.com/build-id: "${BUILD_ID}"
        # Service mesh configuration
        sidecar.istio.io/userVolumeMount: '[{"name":"tmp", "mountPath":"/tmp", "readonly":false}]'
        sidecar.istio.io/userVolume: '[{"name":"tmp", "emptyDir":{}}]'
    spec:
      # Security context for the pod
      securityContext:
        # Run as non-root user for security compliance
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        # Set security context for financial services compliance
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [1000]
      
      # Image pull secrets for Harbor registry
      imagePullSecrets:
        - name: harbor-registry-secret
      
      # Service account for RBAC
      serviceAccountName: notification-service
      automountServiceAccountToken: true
      
      # DNS configuration for service discovery
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "2"
          - name: edns0
      
      # Termination grace period for graceful shutdown
      terminationGracePeriodSeconds: 60
      
      # Node selection and affinity rules
      nodeSelector:
        kubernetes.io/arch: amd64
        node-role.kubernetes.io/worker: "true"
        # Prefer nodes in different AZs for HA
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - notification-service
                topologyKey: kubernetes.io/hostname
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - notification-service
                topologyKey: topology.kubernetes.io/zone
      
      # Tolerations for specific node taints if needed
      tolerations:
        - key: "node.kubernetes.io/memory-pressure"
          operator: "Exists"
          effect: "NoSchedule"
          tolerationSeconds: 300
      
      # Init containers for pre-startup tasks
      initContainers:
        - name: wait-for-kafka
          image: busybox:1.36.1
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Kafka to be ready..."
              until nc -z kafka-headless.infrastructure.svc.cluster.local 9092; do
                echo "Kafka not ready, waiting..."
                sleep 5
              done
              echo "Kafka is ready!"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 50m
              memory: 32Mi
        
        - name: config-validator
          image: harbor.financial-platform.com/ufs/config-validator:v1.0.0
          command: ['sh', '-c']
          args:
            - |
              echo "Validating notification service configuration..."
              # Validate environment variables and configurations
              if [ -z "$KAFKA_BOOTSTRAP_SERVERS" ]; then
                echo "ERROR: KAFKA_BOOTSTRAP_SERVERS not set"
                exit 1
              fi
              if [ -z "$EMAIL_PROVIDER_API_KEY" ]; then
                echo "ERROR: EMAIL_PROVIDER_API_KEY not set"
                exit 1
              fi
              echo "Configuration validation completed successfully"
          envFrom:
            - configMapRef:
                name: notification-service-config
            - secretRef:
                name: notification-service-secrets
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 50m
              memory: 64Mi
      
      # Main application containers
      containers:
        - name: notification-service
          image: harbor.financial-platform.com/ufs/notification-service:latest
          imagePullPolicy: IfNotPresent
          
          # Container ports
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: management
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          
          # Environment variables from ConfigMap and Secrets
          envFrom:
            - configMapRef:
                name: notification-service-config
            - secretRef:
                name: notification-service-secrets
          
          # Additional environment variables
          env:
            - name: JAVA_OPTS
              value: "-Xms1g -Xmx1536m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -Djava.security.egd=file:/dev/./urandom"
            - name: SPRING_PROFILES_ACTIVE
              value: "production,kubernetes"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: INSTANCE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            # Distributed tracing configuration
            - name: JAEGER_AGENT_HOST
              value: "jaeger-agent.monitoring.svc.cluster.local"
            - name: JAEGER_AGENT_PORT
              value: "6831"
            - name: JAEGER_SERVICE_NAME
              value: "notification-service"
            - name: JAEGER_SAMPLER_TYPE
              value: "probabilistic"
            - name: JAEGER_SAMPLER_PARAM
              value: "0.1"
            # Application specific environment variables
            - name: SERVER_PORT
              value: "8080"
            - name: MANAGEMENT_PORT
              value: "8081"
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "health,info,metrics,prometheus,env,configprops"
            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"
            - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
              value: "true"
            # Security configuration
            - name: MANAGEMENT_SECURITY_ENABLED
              value: "false"
            - name: ENDPOINTS_HEALTH_SENSITIVE
              value: "false"
          
          # Resource allocation based on Standard tier
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
              ephemeral-storage: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
              ephemeral-storage: 2Gi
          
          # Security context for container
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          
          # Volume mounts for temporary storage and configuration
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
              readOnly: false
            - name: cache-volume
              mountPath: /app/cache
              readOnly: false
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: logs-volume
              mountPath: /app/logs
              readOnly: false
            # Mount for application secrets
            - name: notification-secrets
              mountPath: /app/secrets
              readOnly: true
          
          # Startup probe for application initialization
          startupProbe:
            httpGet:
              path: /actuator/health/readiness
              port: management
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 12
            successThreshold: 1
          
          # Readiness probe for traffic routing
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: management
              scheme: HTTP
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          # Liveness probe for container health
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: management
              scheme: HTTP
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          # Lifecycle hooks for graceful shutdown
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    echo "Initiating graceful shutdown..."
                    # Send SIGTERM to allow application to finish processing
                    kill -TERM 1
                    # Wait for application to shutdown gracefully
                    sleep 15
        
        # Sidecar container for log collection (optional)
        - name: log-collector
          image: fluent/fluent-bit:2.2.0
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 50m
              memory: 128Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: logs-volume
              mountPath: /app/logs
              readOnly: true
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
              readOnly: true
          env:
            - name: FLUENT_CONF
              value: "fluent-bit.conf"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      
      # Volumes for the pod
      volumes:
        - name: tmp-volume
          emptyDir:
            sizeLimit: 100Mi
        - name: cache-volume
          emptyDir:
            sizeLimit: 500Mi
        - name: logs-volume
          emptyDir:
            sizeLimit: 1Gi
        - name: config-volume
          configMap:
            name: notification-service-config
            defaultMode: 0444
        - name: notification-secrets
          secret:
            secretName: notification-service-secrets
            defaultMode: 0440
        - name: fluent-bit-config
          configMap:
            name: fluent-bit-config
            defaultMode: 0444

---
# Pod Disruption Budget for High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: notification-service-pdb
  namespace: backend
  labels:
    app: notification-service
    component: backend
  annotations:
    description: "Ensures minimum availability during planned maintenance"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: notification-service

---
# Horizontal Pod Autoscaler for dynamic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: notification-service-hpa
  namespace: backend
  labels:
    app: notification-service
    component: backend
  annotations:
    description: "Auto-scales notification service based on CPU and memory usage"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: notification-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 25
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      selectPolicy: Min

---
# Service Account for RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: notification-service
  namespace: backend
  labels:
    app: notification-service
    component: backend
  annotations:
    description: "Service account for notification service with minimal required permissions"
automountServiceAccountToken: true

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: notification-service-netpol
  namespace: backend
  labels:
    app: notification-service
    component: backend
  annotations:
    description: "Network policy to restrict traffic to notification service"
spec:
  podSelector:
    matchLabels:
      app: notification-service
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow traffic from other services in backend namespace
    - from:
        - namespaceSelector:
            matchLabels:
              name: backend
        - namespaceSelector:
            matchLabels:
              name: api-gateway
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 8081
    # Allow monitoring traffic
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
    # Allow HTTPS traffic for external APIs
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow Kafka communication
    - to:
        - namespaceSelector:
            matchLabels:
              name: infrastructure
      ports:
        - protocol: TCP
          port: 9092
    # Allow database connections
    - to:
        - namespaceSelector:
            matchLabels:
              name: data
      ports:
        - protocol: TCP
          port: 5432
        - protocol: TCP
          port: 27017
        - protocol: TCP
          port: 6379