apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-service
  namespace: default
  labels:
    app: analytics-service
    component: backend
    tier: analytics
    version: v1.0.0
    part-of: unified-financial-platform
    managed-by: kubernetes
    environment: production
    criticality: high
    compliance: "PCI-DSS,SOX,GDPR"
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: "Initial deployment of Analytics Service for Predictive Analytics Dashboard"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/actuator/prometheus"
    sidecar.istio.io/inject: "true"
    policy.falco.io/monitor: "true"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: analytics-service
      component: backend
      tier: analytics
  template:
    metadata:
      labels:
        app: analytics-service
        component: backend
        tier: analytics
        version: v1.0.0
        part-of: unified-financial-platform
        criticality: high
        qos-class: burstable
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
        sidecar.istio.io/inject: "true"
        co.elastic.logs/enabled: "true"
        co.elastic.logs/json.keys_under_root: "true"
        co.elastic.logs/json.message_key: "message"
        fluentd.active: "true"
    spec:
      # Security Context for Pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Service Account for RBAC
      serviceAccountName: analytics-service
      automountServiceAccountToken: true
      
      # Pod Disruption Budget consideration
      terminationGracePeriodSeconds: 60
      
      # Node Selection and Affinity
      nodeSelector:
        node-type: compute
        environment: production
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - analytics-service
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
              - key: node.kubernetes.io/instance-type
                operator: NotIn
                values:
                - spot
      
      # Init Containers for Setup
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.36.1
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for database connectivity..."
          until nc -z postgresql-service 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "Waiting for MongoDB..."
          until nc -z mongodb-service 27017; do
            echo "Waiting for MongoDB..."
            sleep 2
          done
          echo "Waiting for Redis..."
          until nc -z redis-service 6379; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "All dependencies are ready!"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      
      containers:
      - name: analytics-service
        image: your-registry/ufs/analytics-service:latest
        imagePullPolicy: Always
        
        # Container Ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: actuator
          containerPort: 8081
          protocol: TCP
        - name: grpc
          containerPort: 9090
          protocol: TCP
        
        # Security Context for Container
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
          seccompProfile:
            type: RuntimeDefault
        
        # Resource Allocation - Burstable QoS for analytics workloads
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        
        # Environment Variables
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production,analytics"
        - name: SERVER_PORT
          value: "8080"
        - name: MANAGEMENT_SERVER_PORT
          value: "8081"
        - name: JAVA_OPTS
          value: "-XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseContainerSupport -Dspring.jmx.enabled=false -Djava.security.egd=file:/dev/./urandom"
        - name: LOG_LEVEL
          value: "INFO"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Environment from ConfigMap and Secrets
        envFrom:
        - configMapRef:
            name: configmap
        - configMapRef:
            name: analytics-config
        - secretRef:
            name: secrets
        - secretRef:
            name: analytics-secrets
        
        # Volume Mounts
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
        - name: analytics-data
          mountPath: /app/data
          readOnly: false
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Startup Probe for slow-starting analytics service
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        
        # Lifecycle Hooks
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Gracefully shutting down analytics service..."
                curl -X POST http://localhost:8081/actuator/shutdown || true
                sleep 15
      
      # Volumes
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: cache-volume
        emptyDir:
          sizeLimit: 2Gi
      - name: logs-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: analytics-data
        persistentVolumeClaim:
          claimName: analytics-data-pvc
      - name: config-volume
        configMap:
          name: analytics-config
          defaultMode: 0644
      
      # Image Pull Secrets
      imagePullSecrets:
      - name: registry-secret
      
      # Pod DNS Configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Restart Policy
      restartPolicy: Always
      
      # Priority Class for important financial services
      priorityClassName: high-priority
      
      # Tolerations for dedicated nodes
      tolerations:
      - key: "financial-services"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300