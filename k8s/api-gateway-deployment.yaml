# Kubernetes Deployment for API Gateway in Financial Services Platform
# This deployment manages the lifecycle of Kong API Gateway pods with enterprise-grade
# features including high availability, security, monitoring, and compliance
#
# Requirements addressed:
# - Horizontal Scalability: Auto-scaling and load distribution across multiple pods
# - Cloud-Native Design: Kubernetes-native orchestration and service mesh integration
# - API Gateway Management: Centralized security, routing, and traffic management
# - Container Orchestration: Production-ready deployment with health checks and resource limits
#
# Technology Stack: Kong Gateway 3.4+, Kubernetes 1.28+, Spring Boot 3.2+, Java 21 LTS
# Compliance: SOC2, PCI-DSS, GDPR, Basel III/IV requirements
# Performance Target: 50,000+ TPS per node, sub-second response times

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-deployment
  namespace: financial-services
  labels:
    # Core application labels
    app: api-gateway
    component: gateway
    tier: infrastructure
    version: v1.0.0
    environment: production
    platform: financial-services
    
    # Kubernetes standard labels for better resource management
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: api-gateway-prod
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: api-gateway
    app.kubernetes.io/part-of: financial-services-platform
    app.kubernetes.io/managed-by: kubernetes
    
    # Financial services compliance and governance labels
    compliance.financial-services/pci-dss: "true"
    compliance.financial-services/sox: "true"
    compliance.financial-services/gdpr: "true"
    compliance.financial-services/basel-iii: "true"
    
    # Operational and monitoring labels
    monitoring.prometheus/scrape: "true"
    logging.fluentd/enabled: "true"
    
    # Security and risk management labels
    security.financial-services/encryption-required: "true"
    security.financial-services/audit-level: "high"
    priority.financial-services/level: "critical"
    workload.financial-services/type: "gateway"
    
    # Cost management and resource allocation labels
    cost.financial-services/center: "infrastructure"
    cost.financial-services/project: "api-gateway"
    
  annotations:
    # Deployment metadata and documentation
    kubernetes.io/description: "Kong API Gateway deployment for unified financial services platform"
    deployment.kubernetes.io/revision: "1"
    
    # Security and compliance annotations
    security.financial-services/last-security-scan: "2024-01-15T10:30:00Z"
    compliance.financial-services/audit-required: "true"
    compliance.financial-services/data-classification: "confidential"
    
    # Monitoring and observability annotations
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
    jaeger.io/enabled: "true"
    
    # Change management and deployment annotations
    deployment.financial-services/approved-by: "platform-team"
    deployment.financial-services/change-ticket: "CHG-2024-001"
    deployment.financial-services/deployment-date: "2024-01-15"
    
    # Performance and scaling annotations
    autoscaling.financial-services/min-replicas: "3"
    autoscaling.financial-services/max-replicas: "20"
    autoscaling.financial-services/target-cpu: "70"
    autoscaling.financial-services/target-memory: "80"
    
    # Networking and service mesh annotations
    sidecar.istio.io/inject: "true"
    sidecar.istio.io/proxyCPU: "100m"
    sidecar.istio.io/proxyMemory: "128Mi"
    
    # Backup and disaster recovery annotations
    backup.financial-services/enabled: "true"
    backup.financial-services/schedule: "0 2 * * *"
    disaster-recovery.financial-services/rto: "15min"
    disaster-recovery.financial-services/rpo: "5min"

spec:
  # Replica configuration for high availability
  replicas: 3
  
  # Deployment strategy for zero-downtime updates
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: "25%"          # Allow 25% more pods during updates
      maxUnavailable: "25%"    # Ensure at least 75% availability during updates
  
  # Revision history limit for rollback capabilities
  revisionHistoryLimit: 10
  
  # Progress deadline for deployment rollout (10 minutes)
  progressDeadlineSeconds: 600
  
  # Minimum seconds for a pod to be considered available
  minReadySeconds: 30
  
  # Selector to match pod labels
  selector:
    matchLabels:
      app: api-gateway
      component: gateway
      tier: infrastructure
      environment: production
  
  # Pod template specification
  template:
    metadata:
      labels:
        # Core pod labels (must match selector)
        app: api-gateway
        component: gateway
        tier: infrastructure
        environment: production
        version: v1.0.0
        platform: financial-services
        
        # Additional pod labels for operational management
        app.kubernetes.io/name: api-gateway
        app.kubernetes.io/instance: api-gateway-prod
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: api-gateway
        
        # Service mesh and networking labels
        sidecar.istio.io/inject: "true"
        networking.financial-services/allow-ingress: "true"
        networking.financial-services/allow-egress: "true"
        
        # Security and compliance pod labels
        security.financial-services/pod-security-standards: "restricted"
        compliance.financial-services/data-handling: "pci-compliant"
        
        # Monitoring and logging labels
        monitoring.prometheus/target: "api-gateway"
        logging.financial-services/json-format: "true"
        
      annotations:
        # Pod security and compliance annotations
        container.apparmor.security.beta.kubernetes.io/api-gateway: "runtime/default"
        seccomp.security.alpha.kubernetes.io/pod: "runtime/default"
        
        # Service mesh configuration
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/proxyCPU: "100m"
        sidecar.istio.io/proxyMemory: "128Mi"
        sidecar.istio.io/proxyLimits: '{"cpu":"200m","memory":"256Mi"}'
        
        # Prometheus monitoring configuration
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/scheme: "http"
        
        # Pod-level security annotations
        security.financial-services/scan-on-startup: "true"
        security.financial-services/vulnerability-check: "required"
        
        # Performance and resource annotations
        performance.financial-services/jvm-opts: "-XX:+UseG1GC -XX:MaxGCPauseMillis=200"
        performance.financial-services/memory-optimization: "true"
        
        # Deployment tracking annotations
        deployment.financial-services/pod-template-hash: "api-gateway-v1"
        deployment.financial-services/config-checksum: "sha256:abcd1234efgh5678"
        
    spec:
      # Security context for the entire pod
      securityContext:
        # Run as non-root user for security
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        
        # Additional security controls
        seccompProfile:
          type: RuntimeDefault
        
        # Supplemental groups for file system permissions
        supplementalGroups: [1001]
        
        # File system group change policy
        fsGroupChangePolicy: "OnRootMismatch"
      
      # Service account for pod identity and RBAC
      serviceAccountName: api-gateway-sa
      automountServiceAccountToken: true
      
      # DNS configuration for service discovery
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "2"
          - name: edns0
      
      # Pod-level resource constraints and QoS
      priority: 1000  # High priority for critical infrastructure
      priorityClassName: "financial-services-high-priority"
      
      # Termination settings
      terminationGracePeriodSeconds: 60
      
      # Restart policy
      restartPolicy: Always
      
      # Node selection and scheduling preferences
      nodeSelector:
        kubernetes.io/arch: amd64
        node.kubernetes.io/instance-type: "m5.xlarge"
        financial-services.platform/tier: "production"
      
      # Tolerations for dedicated financial services nodes
      tolerations:
        - key: "financial-services.platform/dedicated"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
      
      # Pod anti-affinity for high availability across nodes
      affinity:
        podAntiAffinity:
          # Required: Ensure pods are spread across different nodes
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values: [api-gateway]
                  - key: component
                    operator: In
                    values: [gateway]
              topologyKey: kubernetes.io/hostname
          
          # Preferred: Spread across different availability zones
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values: [api-gateway]
                topologyKey: topology.kubernetes.io/zone
        
        # Node affinity for performance-optimized nodes
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values: ["m5.xlarge", "m5.2xlarge", "c5.xlarge", "c5.2xlarge"]
            - weight: 50
              preference:
                matchExpressions:
                  - key: topology.kubernetes.io/zone
                    operator: In
                    values: ["us-east-1a", "us-east-1b", "us-east-1c"]
      
      # Container specifications
      containers:
        - name: api-gateway
          # Container image from private Harbor registry
          image: harbor.financial-platform.com/api-gateway:latest
          imagePullPolicy: IfNotPresent
          
          # Container security context
          securityContext:
            # Security best practices for financial services
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            
            # Linux capabilities - drop all and add only necessary ones
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE  # Required for binding to port 8080
            
            # SELinux and AppArmor security profiles
            seLinuxOptions:
              type: container_t
              level: s0:c123,c456
          
          # Container ports
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP
            - name: admin-ssl
              containerPort: 8444
              protocol: TCP
            - name: metrics
              containerPort: 9542
              protocol: TCP
            - name: status
              containerPort: 8100
              protocol: TCP
          
          # Resource requests and limits for guaranteed QoS
          resources:
            requests:
              cpu: "1000m"      # 1 CPU core minimum
              memory: "2Gi"     # 2GB RAM minimum
              ephemeral-storage: "1Gi"
            limits:
              cpu: "2000m"      # 2 CPU cores maximum
              memory: "4Gi"     # 4GB RAM maximum
              ephemeral-storage: "2Gi"
          
          # Environment variables from ConfigMap and Secrets
          envFrom:
            # Load configuration from ConfigMap
            - configMapRef:
                name: ufs-configmap
                optional: false
            
            # Load sensitive data from Secrets
            - secretRef:
                name: ufs-secrets
                optional: false
          
          # Additional environment variables for container configuration
          env:
            # Java runtime optimization for containers
            - name: JAVA_OPTS
              value: >-
                -XX:+UseG1GC
                -XX:MaxGCPauseMillis=200
                -XX:+UseStringDeduplication
                -XX:+OptimizeStringConcat
                -Xms2g
                -Xmx3g
                -XX:MetaspaceSize=256m
                -XX:MaxMetaspaceSize=512m
                -XX:+HeapDumpOnOutOfMemoryError
                -XX:HeapDumpPath=/tmp/heapdump.hprof
                -XX:+UseContainerSupport
                -XX:MaxRAMPercentage=75.0
            
            # Spring Boot and application configuration
            - name: SPRING_PROFILES_ACTIVE
              value: "production,kubernetes"
            
            - name: SPRING_CLOUD_KUBERNETES_ENABLED
              value: "true"
            
            - name: SPRING_CLOUD_KUBERNETES_RELOAD_ENABLED
              value: "true"
            
            - name: SPRING_CLOUD_KUBERNETES_CONFIG_ENABLED
              value: "true"
            
            # Logging configuration
            - name: LOGGING_LEVEL_ROOT
              value: "INFO"
            
            - name: LOGGING_LEVEL_COM_UFS
              value: "DEBUG"
            
            - name: LOGGING_PATTERN_CONSOLE
              value: "%d{HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
            
            # Monitoring and observability
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "health,info,metrics,prometheus,gateway"
            
            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"
            
            - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
              value: "true"
            
            # Service discovery
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: "http://discovery-service:8761/eureka/"
            
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: "true"
            
            # Pod information for service registration
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            
            # Distributed tracing configuration
            - name: JAEGER_AGENT_HOST
              value: "jaeger-agent"
            
            - name: JAEGER_AGENT_PORT
              value: "6831"
            
            - name: JAEGER_SERVICE_NAME
              value: "api-gateway"
            
            - name: JAEGER_SAMPLER_TYPE
              value: "probabilistic"
            
            - name: JAEGER_SAMPLER_PARAM
              value: "0.1"
          
          # Volume mounts for configuration and temporary files
          volumeMounts:
            # Temporary directory for heap dumps and application temp files
            - name: tmp-volume
              mountPath: /tmp
              readOnly: false
            
            # Log directory
            - name: log-volume
              mountPath: /var/log/api-gateway
              readOnly: false
            
            # Configuration volume for additional config files
            - name: config-volume
              mountPath: /config
              readOnly: true
            
            # TLS certificates volume
            - name: tls-certs
              mountPath: /etc/ssl/certs/api-gateway
              readOnly: true
          
          # Startup probe for initial container readiness
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          
          # Liveness probe for container health monitoring
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
              scheme: HTTP
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          # Readiness probe for service availability
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
              scheme: HTTP
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1
          
          # Lifecycle hooks for graceful shutdown
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    echo "Starting graceful shutdown..."
                    # Notify load balancer to stop sending traffic
                    curl -X POST http://localhost:8080/actuator/shutdown-prepare || true
                    # Wait for existing connections to drain
                    sleep 15
                    echo "Graceful shutdown preparation completed"
      
      # Init containers for setup and validation
      initContainers:
        # Database connectivity check
        - name: db-check
          image: postgres:16-alpine
          command:
            - /bin/sh
            - -c
            - |
              echo "Checking database connectivity..."
              until pg_isready -h postgresql -p 5432 -U $POSTGRES_USER; do
                echo "Waiting for database to be ready..."
                sleep 5
              done
              echo "Database is ready!"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: ufs-secrets
                  key: DB_USERNAME
                  optional: false
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ALL]
        
        # Redis connectivity check
        - name: redis-check
          image: redis:7.2-alpine
          command:
            - /bin/sh
            - -c
            - |
              echo "Checking Redis connectivity..."
              until redis-cli -h redis -p 6379 ping; do
                echo "Waiting for Redis to be ready..."
                sleep 3
              done
              echo "Redis is ready!"
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ALL]
        
        # Configuration validation
        - name: config-validator
          image: harbor.financial-platform.com/config-validator:latest
          command:
            - /bin/sh
            - -c
            - |
              echo "Validating configuration..."
              # Validate ConfigMap and Secret references
              if [ -z "$DB_USERNAME" ]; then
                echo "ERROR: DB_USERNAME not found in secrets"
                exit 1
              fi
              if [ -z "$JWT_SECRET" ]; then
                echo "ERROR: JWT_SECRET not found in secrets"
                exit 1
              fi
              echo "Configuration validation completed successfully!"
          envFrom:
            - configMapRef:
                name: ufs-configmap
            - secretRef:
                name: ufs-secrets
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ALL]
      
      # Volumes for temporary storage and configuration
      volumes:
        # Temporary volume for heap dumps and temp files
        - name: tmp-volume
          emptyDir:
            sizeLimit: 1Gi
            medium: Memory  # Use tmpfs for better performance
        
        # Log volume for application logs
        - name: log-volume
          emptyDir:
            sizeLimit: 2Gi
        
        # Configuration volume from ConfigMap
        - name: config-volume
          configMap:
            name: ufs-configmap
            defaultMode: 0644
            items:
              - key: application.yml
                path: application.yml
        
        # TLS certificates volume
        - name: tls-certs
          secret:
            secretName: api-gateway-tls
            defaultMode: 0600
            optional: true
      
      # Image pull secrets for private registry access
      imagePullSecrets:
        - name: harbor-registry-secret

---
# HorizontalPodAutoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: financial-services
  labels:
    app: api-gateway
    component: autoscaling
    tier: infrastructure
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway-deployment
  minReplicas: 3
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60

---
# PodDisruptionBudget for maintaining availability during updates
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: financial-services
  labels:
    app: api-gateway
    component: availability
    tier: infrastructure
spec:
  minAvailable: 80%
  selector:
    matchLabels:
      app: api-gateway
      component: gateway
      tier: infrastructure

---
# ServiceAccount for pod identity and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-gateway-sa
  namespace: financial-services
  labels:
    app: api-gateway
    component: identity
    tier: infrastructure
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/api-gateway-service-role
automountServiceAccountToken: true

---
# Role for API Gateway service account permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: api-gateway-role
  namespace: financial-services
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list"]

---
# RoleBinding to associate ServiceAccount with Role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: api-gateway-rolebinding
  namespace: financial-services
subjects:
  - kind: ServiceAccount
    name: api-gateway-sa
    namespace: financial-services
roleRef:
  kind: Role
  name: api-gateway-role
  apiGroup: rbac.authorization.k8s.io