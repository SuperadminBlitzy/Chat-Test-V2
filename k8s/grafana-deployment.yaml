apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    tier: observability
    platform: financial-services
    version: "10.2.0"
  annotations:
    deployment.kubernetes.io/revision: "1"
    platform.financial-services/component: "metrics-visualization"
    platform.financial-services/criticality: "important"
    platform.financial-services/compliance: "sox,pci-dss"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: grafana
      component: monitoring
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
        tier: observability
        platform: financial-services
        version: "10.2.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        platform.financial-services/config-checksum: "placeholder-for-config-hash"
    spec:
      # Security Context for Pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 472  # Official Grafana user ID
        runAsGroup: 472
        fsGroup: 472
        seccompProfile:
          type: RuntimeDefault
      
      # Service Account for RBAC
      serviceAccountName: grafana-service-account
      
      # Pod disruption budget considerations
      terminationGracePeriodSeconds: 60
      
      # Node affinity for production workloads
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/monitoring
                operator: In
                values: ["true"]
          - weight: 50
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["amd64"]
        
        # Anti-affinity to avoid single point of failure
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["grafana"]
              topologyKey: kubernetes.io/hostname
      
      # Pod tolerations for dedicated monitoring nodes
      tolerations:
      - key: "monitoring"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      # Init container for data directory permissions
      initContainers:
      - name: init-permissions
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          mkdir -p /var/lib/grafana/dashboards
          mkdir -p /var/lib/grafana/plugins
          chown -R 472:472 /var/lib/grafana
          chmod -R 755 /var/lib/grafana
        securityContext:
          runAsUser: 0
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - FOWNER
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        imagePullPolicy: IfNotPresent
        
        # Container ports
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        
        # Environment variables for Grafana configuration
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-admin-credentials
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin-credentials
              key: admin-password
        - name: GF_SECURITY_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: grafana-secret-key
              key: secret-key
        - name: GF_DATABASE_TYPE
          value: "sqlite3"
        - name: GF_DATABASE_PATH
          value: "/var/lib/grafana/grafana.db"
        - name: GF_PATHS_DATA
          value: "/var/lib/grafana"
        - name: GF_PATHS_LOGS
          value: "/var/lib/grafana/logs"
        - name: GF_PATHS_PLUGINS
          value: "/var/lib/grafana/plugins"
        - name: GF_PATHS_PROVISIONING
          value: "/etc/grafana/provisioning"
        - name: GF_SERVER_HTTP_PORT
          value: "3000"
        - name: GF_SERVER_DOMAIN
          value: "grafana.monitoring.svc.cluster.local"
        - name: GF_SERVER_ROOT_URL
          value: "http://grafana.monitoring.svc.cluster.local:3000"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "false"
        - name: GF_AUTH_DISABLE_LOGIN_FORM
          value: "false"
        - name: GF_SECURITY_DISABLE_GRAVATAR
          value: "true"
        - name: GF_SECURITY_COOKIE_SECURE
          value: "true"
        - name: GF_SECURITY_COOKIE_SAMESITE
          value: "strict"
        - name: GF_SECURITY_CONTENT_TYPE_PROTECTION
          value: "true"
        - name: GF_SECURITY_X_CONTENT_TYPE_OPTIONS
          value: "nosniff"
        - name: GF_SECURITY_X_XSS_PROTECTION
          value: "true"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_USERS_ALLOW_ORG_CREATE
          value: "false"
        - name: GF_USERS_AUTO_ASSIGN_ORG
          value: "true"
        - name: GF_USERS_AUTO_ASSIGN_ORG_ROLE
          value: "Viewer"
        - name: GF_LOG_MODE
          value: "console"
        - name: GF_LOG_LEVEL
          value: "info"
        - name: GF_METRICS_ENABLED
          value: "true"
        - name: GF_METRICS_BASIC_AUTH_USERNAME
          valueFrom:
            secretKeyRef:
              name: grafana-metrics-credentials
              key: metrics-user
        - name: GF_METRICS_BASIC_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-metrics-credentials
              key: metrics-password
        - name: GF_ALERTING_ENABLED
          value: "true"
        - name: GF_UNIFIED_ALERTING_ENABLED
          value: "true"
        - name: GF_EXPLORE_ENABLED
          value: "true"
        - name: GF_FEATURE_TOGGLES_ENABLE
          value: "publicDashboards,lokiExperimentalStreaming,accesscontrol"
        # Financial services specific configurations
        - name: GF_ENTERPRISE_LICENSE_TEXT
          valueFrom:
            secretKeyRef:
              name: grafana-enterprise-license
              key: license
              optional: true
        - name: GF_RENDERING_SERVER_URL
          value: "http://grafana-image-renderer:8081/render"
        - name: GF_RENDERING_CALLBACK_URL
          value: "http://grafana.monitoring.svc.cluster.local:3000/"
        
        # Volume mounts
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
          subPath: data
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: grafana-dashboard-definitions
          mountPath: /var/lib/grafana/dashboards
          readOnly: true
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
          readOnly: true
        - name: grafana-ldap-config
          mountPath: /etc/grafana/ldap.toml
          subPath: ldap.toml
          readOnly: true
          optional: true
        
        # Resource requirements based on financial services QoS matrix
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Grafana needs write access to /tmp
          runAsNonRoot: true
          runAsUser: 472
          runAsGroup: 472
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /api/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
      
      # Volumes configuration
      volumes:
      # Persistent storage for Grafana data
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      
      # Datasources configuration from ConfigMap
      - name: grafana-datasources
        configMap:
          name: grafana-datasources-config
          defaultMode: 0644
          items:
          - key: prometheus.yaml
            path: prometheus.yaml
          - key: loki.yaml
            path: loki.yaml
          - key: alertmanager.yaml
            path: alertmanager.yaml
      
      # Dashboard providers configuration
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards-config
          defaultMode: 0644
      
      # Dashboard definitions from multiple ConfigMaps
      - name: grafana-dashboard-definitions
        projected:
          defaultMode: 0644
          sources:
          - configMap:
              name: grafana-dashboard-financial-services
              items:
              - key: financial-overview.json
                path: financial-overview.json
              - key: transaction-monitoring.json
                path: transaction-monitoring.json
              - key: fraud-detection.json
                path: fraud-detection.json
          - configMap:
              name: grafana-dashboard-infrastructure
              items:
              - key: kubernetes-cluster.json
                path: kubernetes-cluster.json
              - key: application-performance.json
                path: application-performance.json
              - key: database-monitoring.json
                path: database-monitoring.json
          - configMap:
              name: grafana-dashboard-compliance
              items:
              - key: audit-logging.json
                path: audit-logging.json
              - key: security-monitoring.json
                path: security-monitoring.json
              - key: regulatory-reporting.json
                path: regulatory-reporting.json
      
      # Main Grafana configuration
      - name: grafana-config
        configMap:
          name: grafana-main-config
          defaultMode: 0644
          items:
          - key: grafana.ini
            path: grafana.ini
      
      # LDAP configuration for enterprise authentication
      - name: grafana-ldap-config
        secret:
          secretName: grafana-ldap-config
          defaultMode: 0600
          optional: true
          items:
          - key: ldap.toml
            path: ldap.toml
      
      # Image pull secrets for private registries
      imagePullSecrets:
      - name: financial-platform-registry-secret

---
# Pod Disruption Budget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: grafana-pdb
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: grafana
      component: monitoring

---
# Network Policy for secure communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-network-policy
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  podSelector:
    matchLabels:
      app: grafana
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from within monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  # Allow ingress from financial-services namespace for dashboards
  - from:
    - namespaceSelector:
        matchLabels:
          name: financial-services
    ports:
    - protocol: TCP
      port: 3000
  egress:
  # Allow egress to Prometheus and other monitoring services
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Prometheus
    - protocol: TCP
      port: 3100  # Loki
    - protocol: TCP
      port: 9093  # Alertmanager
  # Allow egress to kube-system for DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow egress to databases in financial-services namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: financial-services
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 27017 # MongoDB
  # Allow HTTPS egress for plugin downloads and updates
  - to: []
    ports:
    - protocol: TCP
      port: 443