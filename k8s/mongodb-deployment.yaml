# MongoDB Deployment for Unified Financial Services Platform
# This deployment provides document storage, analytics data, and customer interaction capabilities
# with enterprise-grade security, compliance, and monitoring features for financial services
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
  namespace: financial-services
  labels:
    app: mongodb
    component: database-server
    tier: database
    version: v1
    environment: production
    platform: unified-financial-services
    data-classification: restricted
    compliance-required: "true"
    # Financial services specific labels
    service-category: data-persistence
    business-unit: platform-engineering
    cost-center: infrastructure
    # Monitoring and observability labels
    monitoring: enabled
    prometheus-scrape: "true"
    istio-injection: enabled
  annotations:
    # Deployment strategy and rollout configuration
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: "Initial MongoDB deployment for financial services platform"
    
    # Financial services compliance annotations
    compliance.financial-services/data-classification: "restricted"
    compliance.financial-services/encryption-required: "true"
    compliance.financial-services/audit-logging: "enabled"
    compliance.financial-services/backup-required: "true"
    compliance.financial-services/monitoring-required: "true"
    
    # Security and access control annotations
    security.kubernetes.io/pod-security-standard: "restricted"
    security.kubernetes.io/run-as-non-root: "true"
    security.kubernetes.io/seccomp-profile: "runtime/default"
    
    # Service mesh annotations for Istio
    istio.io/rev: "default"
    sidecar.istio.io/inject: "true"
    sidecar.istio.io/proxyCPU: "100m"
    sidecar.istio.io/proxyMemory: "128Mi"
    
    # Monitoring and observability annotations
    prometheus.io/scrape: "true"
    prometheus.io/port: "9216"
    prometheus.io/path: "/metrics"
    
    # Documentation and operational information
    description: "MongoDB database deployment for document storage, analytics data, and customer interactions in financial services"
    owner: "platform-engineering"
    contact: "platform-engineering@financial-platform.com"
    documentation: "https://docs.financial-platform.com/services/mongodb"
    runbook: "https://runbooks.financial-platform.com/mongodb"
    escalation: "platform-engineering-oncall"
spec:
  # Deployment strategy optimized for financial services availability requirements
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  # Extended grace period for financial data consistency
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
  
  selector:
    matchLabels:
      app: mongodb
      component: database-server
      tier: database
  
  template:
    metadata:
      labels:
        app: mongodb
        component: database-server
        tier: database
        version: v1
        environment: production
        platform: unified-financial-services
        data-classification: restricted
        # Pod-specific labels for network policies and service mesh
        istio-injection: enabled
        monitoring: enabled
      annotations:
        # Pod-level compliance and security annotations
        compliance.financial-services/data-classification: "restricted"
        compliance.financial-services/encryption-at-rest: "enabled"
        compliance.financial-services/access-logging: "enabled"
        
        # Security context annotations
        container.apparmor.security.beta.kubernetes.io/mongodb: "runtime/default"
        seccomp.security.alpha.kubernetes.io/pod: "runtime/default"
        
        # Istio service mesh configuration
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/proxyCPU: "100m"
        sidecar.istio.io/proxyMemory: "128Mi"
        traffic.sidecar.istio.io/includeInboundPorts: "27017"
        traffic.sidecar.istio.io/excludeOutboundPorts: ""
        
        # Monitoring configuration
        prometheus.io/scrape: "true"
        prometheus.io/port: "9216"
        prometheus.io/path: "/metrics"
        
        # Operational annotations
        kubectl.kubernetes.io/default-container: "mongodb"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
    
    spec:
      # Security context for pod-level security
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [999]
      
      # Service account with minimal required permissions
      serviceAccountName: mongodb-service-account
      automountServiceAccountToken: false
      
      # DNS and network configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "2"
          - name: edns0
      
      # Pod disruption and availability configuration
      terminationGracePeriodSeconds: 60
      restartPolicy: Always
      
      # Node scheduling and affinity rules for high availability
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: database
        environment: production
      
      affinity:
        # Prefer nodes with SSD storage for database performance
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: storage-type
                    operator: In
                    values: ["ssd", "nvme"]
            - weight: 50
              preference:
                matchExpressions:
                  - key: instance-type
                    operator: In
                    values: ["memory-optimized", "compute-optimized"]
        
        # Anti-affinity to avoid scheduling on same node as other databases
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: component
                      operator: In
                      values: ["database-server", "database"]
                    - key: app
                      operator: NotIn
                      values: ["mongodb"]
                topologyKey: kubernetes.io/hostname
      
      # Tolerations for database-specific nodes
      tolerations:
        - key: "database"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
        - key: "high-memory"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      
      # Init containers for database preparation and validation
      initContainers:
        # Init container for file system permissions and setup
        - name: init-permissions
          image: busybox:1.36
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: true
            capabilities:
              add: ["CHOWN", "FOWNER"]
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Setting up MongoDB data directory permissions..."
              chown -R 999:999 /data/db
              chmod 755 /data/db
              echo "Setting up init script permissions..."
              chown -R 999:999 /docker-entrypoint-initdb.d
              chmod -R 755 /docker-entrypoint-initdb.d
              echo "Permissions setup completed successfully"
          volumeMounts:
            - name: mongodb-persistent-storage
              mountPath: /data/db
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
          resources:
            requests:
              cpu: "10m"
              memory: "16Mi"
            limits:
              cpu: "100m"
              memory: "64Mi"
        
        # Init container for configuration validation
        - name: config-validator
          image: mongo:7.0.12
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Validating MongoDB configuration..."
              
              # Validate environment variables
              if [ -z "$MONGO_INITDB_ROOT_USERNAME" ]; then
                echo "ERROR: MONGO_INITDB_ROOT_USERNAME not set"
                exit 1
              fi
              
              if [ -z "$MONGO_INITDB_ROOT_PASSWORD" ]; then
                echo "ERROR: MONGO_INITDB_ROOT_PASSWORD not set"
                exit 1
              fi
              
              # Validate init script exists
              if [ ! -f "/docker-entrypoint-initdb.d/init-mongodb.js" ]; then
                echo "ERROR: Init script not found"
                exit 1
              fi
              
              echo "Configuration validation completed successfully"
          envFrom:
            - secretRef:
                name: db-credentials-mongo
          volumeMounts:
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              cpu: "10m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"
      
      containers:
        # Main MongoDB container with enterprise security configuration
        - name: mongodb
          image: mongo:7.0.12
          imagePullPolicy: IfNotPresent
          
          # Container security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
            readOnlyRootFilesystem: false  # MongoDB needs write access to data directory
          
          # Container ports
          ports:
            - name: mongo
              containerPort: 27017
              protocol: TCP
          
          # Environment variables from secrets and configmaps
          envFrom:
            - secretRef:
                name: db-credentials-mongo
            - configMapRef:
                name: mongodb-config
                optional: true
          
          env:
            # MongoDB specific configuration
            - name: MONGO_INITDB_DATABASE
              value: "admin"
            - name: MONGODB_ENABLE_JOURNAL
              value: "true"
            - name: MONGODB_ENABLE_IPV6
              value: "false"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "false"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "1"
            
            # Connection pool configuration from technical specifications
            - name: MONGODB_MAX_POOL_SIZE
              value: "100"
            - name: MONGODB_MIN_POOL_SIZE
              value: "10"
            - name: MONGODB_MAX_IDLE_TIME_MS
              value: "300000"
            - name: MONGODB_WAIT_QUEUE_TIMEOUT_MS
              value: "10000"
            - name: MONGODB_SERVER_SELECTION_TIMEOUT_MS
              value: "30000"
            
            # Security and compliance configuration
            - name: MONGODB_ENABLE_AUTH
              value: "true"
            - name: MONGODB_AUTH_MECHANISM
              value: "SCRAM-SHA-256"
            - name: MONGODB_ENABLE_TLS
              value: "false"  # TLS handled by service mesh
            
            # Performance and storage configuration
            - name: MONGODB_STORAGE_ENGINE
              value: "wiredTiger"
            - name: MONGODB_WIRED_TIGER_CACHE_SIZE_GB
              value: "2"
            - name: MONGODB_OPLOG_SIZE_MB
              value: "1024"
            
            # Pod and deployment information
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          
          # MongoDB startup command with financial services optimizations
          command:
            - mongod
          args:
            - --auth
            - --bind_ip_all
            - --port=27017
            - --dbpath=/data/db
            - --logpath=/dev/stdout
            - --logappend
            - --journal
            - --storageEngine=wiredTiger
            # WiredTiger configuration for financial services workloads
            - --wiredTigerCacheSizeGB=2
            - --wiredTigerCheckpointDelaySecs=60
            - --wiredTigerJournalCompressor=snappy
            - --wiredTigerCollectionBlockCompressor=snappy
            # OpLog configuration for replication readiness
            - --oplogSize=1024
            # Connection and timeout configuration
            - --maxConns=1000
            - --timeStampFormat=iso8601-utc
            # Security configuration
            - --enableLocalhostAuthBypass=false
            - --authenticationMechanisms=SCRAM-SHA-1,SCRAM-SHA-256
            # Profiling for performance monitoring
            - --profile=1
            - --slowms=100
          
          # Volume mounts for data persistence and configuration
          volumeMounts:
            - name: mongodb-persistent-storage
              mountPath: /data/db
              subPath: mongodb-data
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: mongodb-config-volume
              mountPath: /etc/mongodb
              readOnly: true
          
          # Health checks for container lifecycle management
          livenessProbe:
            exec:
              command:
                - mongosh
                - --quiet
                - --eval
                - "db.runCommand('ping').ok"
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          
          readinessProbe:
            exec:
              command:
                - mongosh
                - --quiet
                - --eval
                - "db.runCommand('ismaster').ismaster"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          startupProbe:
            exec:
              command:
                - mongosh
                - --quiet
                - --eval
                - "db.runCommand('ping').ok"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          
          # Resource allocation with guaranteed QoS for critical financial services
          resources:
            requests:
              cpu: "1000m"      # 1 CPU core guaranteed
              memory: "4Gi"     # 4GB memory guaranteed
              ephemeral-storage: "10Gi"
            limits:
              cpu: "2000m"      # 2 CPU cores maximum
              memory: "4Gi"     # 4GB memory maximum (same as request for Guaranteed QoS)
              ephemeral-storage: "20Gi"
          
          # Lifecycle hooks for graceful shutdown
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - |
                    set -e
                    echo "Initiating graceful MongoDB shutdown..."
                    mongosh --quiet --eval "
                      try {
                        db.getSiblingDB('admin').shutdownServer({force: false, timeoutSecs: 60});
                        print('MongoDB shutdown initiated successfully');
                      } catch (e) {
                        print('Shutdown command executed: ' + e.message);
                      }
                    " || echo "Shutdown command completed"
                    
                    # Wait for MongoDB process to terminate gracefully
                    sleep 10
                    echo "MongoDB graceful shutdown completed"
        
        # MongoDB Exporter for Prometheus monitoring
        - name: mongodb-exporter
          image: percona/mongodb_exporter:0.40.0
          imagePullPolicy: IfNotPresent
          
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
            readOnlyRootFilesystem: true
          
          ports:
            - name: metrics
              containerPort: 9216
              protocol: TCP
          
          env:
            - name: MONGODB_URI
              value: "mongodb://localhost:27017"
            - name: MONGODB_EXPORTER_WEB_LISTEN_ADDRESS
              value: ":9216"
            - name: MONGODB_EXPORTER_WEB_TELEMETRY_PATH
              value: "/metrics"
            - name: MONGODB_EXPORTER_LOG_LEVEL
              value: "info"
            - name: MONGODB_EXPORTER_COLLECT_ALL
              value: "true"
            - name: MONGODB_EXPORTER_COMPATIBLE_MODE
              value: "true"
          
          args:
            - --web.listen-address=:9216
            - --web.telemetry-path=/metrics
            - --log.level=info
            - --collect-all
            - --compatible-mode
          
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9216
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9216
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      
      # Volume definitions for data persistence and configuration
      volumes:
        # Persistent storage for MongoDB data
        - name: mongodb-persistent-storage
          persistentVolumeClaim:
            claimName: mongodb-pvc
        
        # Init script configuration from ConfigMap
        - name: init-script
          configMap:
            name: mongodb-init-script
            defaultMode: 0755
            items:
              - key: init-mongodb.js
                path: init-mongodb.js
        
        # MongoDB configuration from ConfigMap
        - name: mongodb-config-volume
          configMap:
            name: mongodb-config
            defaultMode: 0644
            optional: true
        
        # Temporary filesystem for containers
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
      
      # Image pull secrets if using private registry
      imagePullSecrets:
        - name: docker-registry-secret