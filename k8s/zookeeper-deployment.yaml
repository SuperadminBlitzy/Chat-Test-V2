apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
  namespace: financial-services
  labels:
    app: zookeeper
    component: event-streaming
    tier: infrastructure
    version: "7.5.0"
    managed-by: kubernetes
    environment: production
  annotations:
    description: "Zookeeper deployment for Apache Kafka cluster - critical infrastructure component"
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: "Initial deployment of Zookeeper for financial services event streaming platform"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: zookeeper
      component: event-streaming
  template:
    metadata:
      labels:
        app: zookeeper
        component: event-streaming
        tier: infrastructure
        version: "7.5.0"
        qos-class: guaranteed
        criticality: high
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9999"
        prometheus.io/path: "/metrics"
    spec:
      # Anti-affinity to ensure pods are distributed across different nodes for high availability
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - zookeeper
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - compute-optimized
      # Security context for enhanced security posture
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      # Service account for RBAC and security
      serviceAccountName: zookeeper-service-account
      # Termination grace period for graceful shutdown
      terminationGracePeriodSeconds: 30
      # DNS configuration for proper service discovery
      dnsPolicy: ClusterFirst
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.5.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: client
          containerPort: 2181
          protocol: TCP
        - name: follower
          containerPort: 2888
          protocol: TCP
        - name: election
          containerPort: 3888
          protocol: TCP
        - name: jmx
          containerPort: 9999
          protocol: TCP
        # Environment variables for Zookeeper configuration
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        - name: ZOOKEEPER_INIT_LIMIT
          value: "10"
        - name: ZOOKEEPER_SYNC_LIMIT
          value: "5"
        - name: ZOOKEEPER_MAX_CLIENT_CNXNS
          value: "60"
        - name: ZOOKEEPER_SNAP_RETAIN_COUNT
          value: "3"
        - name: ZOOKEEPER_PURGE_INTERVAL
          value: "24"
        - name: ZOOKEEPER_LOG_LEVEL
          value: "INFO"
        - name: ZOOKEEPER_SERVERS
          value: "zookeeper-service-0.zookeeper-headless.financial-services.svc.cluster.local:2888:3888;zookeeper-service-1.zookeeper-headless.financial-services.svc.cluster.local:2888:3888;zookeeper-service-2.zookeeper-headless.financial-services.svc.cluster.local:2888:3888"
        # JVM configuration for optimal performance
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx1536m -Xms1536m"
        - name: KAFKA_JVM_PERFORMANCE_OPTS
          value: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true"
        - name: KAFKA_GC_LOG_OPTS
          value: "-Xlog:gc*:stdout:time -XX:+UseStringDeduplication"
        - name: KAFKA_JMX_OPTS
          value: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=9999"
        # Resource configuration following guaranteed QoS class for critical financial services
        resources:
          requests:
            cpu: "1000m"
            memory: "2Gi"
            ephemeral-storage: "1Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
            ephemeral-storage: "2Gi"
        # Security context for container-level security
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        # Health checks for service reliability
        livenessProbe:
          tcpSocket:
            port: 2181
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "echo 'ruok' | nc localhost 2181 | grep imok"
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        # Startup probe for initial container startup
        startupProbe:
          tcpSocket:
            port: 2181
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 12
        # Volume mounts for persistent data storage
        volumeMounts:
        - name: zookeeper-data
          mountPath: /var/lib/zookeeper/data
          subPath: data
        - name: zookeeper-log
          mountPath: /var/lib/zookeeper/log
          subPath: log
        - name: zookeeper-config
          mountPath: /etc/kafka/zookeeper.properties
          subPath: zookeeper.properties
          readOnly: true
        # Lifecycle hooks for graceful operations
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - "sleep 15"
      # Volumes for persistent storage and configuration
      volumes:
      - name: zookeeper-data
        persistentVolumeClaim:
          claimName: zookeeper-data-pvc
      - name: zookeeper-log
        persistentVolumeClaim:
          claimName: zookeeper-log-pvc
      - name: zookeeper-config
        configMap:
          name: zookeeper-config
          defaultMode: 0644
      # Image pull secrets for private registries (if needed)
      imagePullSecrets:
      - name: docker-registry-secret
      # Restart policy for pod reliability
      restartPolicy: Always
      # Priority class for critical workloads
      priorityClassName: system-cluster-critical
      # Tolerations for dedicated nodes
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "zookeeper"
        effect: "NoSchedule"
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300