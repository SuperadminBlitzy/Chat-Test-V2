apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-deployment
  namespace: default
  labels:
    app: postgresql
    component: database
    tier: data
    version: "16"
    criticality: high
    qos-class: guaranteed
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/description: "PostgreSQL database deployment for transactional data and customer profiles"
    app.kubernetes.io/name: "postgresql"
    app.kubernetes.io/instance: "postgresql-primary"
    app.kubernetes.io/version: "16"
    app.kubernetes.io/component: "database"
    app.kubernetes.io/part-of: "financial-platform"
    app.kubernetes.io/managed-by: "kubernetes"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: postgresql
      component: database
      tier: data
  template:
    metadata:
      labels:
        app: postgresql
        component: database
        tier: data
        version: "16"
        criticality: high
        qos-class: guaranteed
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      # Security context for the pod
      securityContext:
        fsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      
      # Node scheduling preferences for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: postgresql
              topologyKey: kubernetes.io/hostname
      
      # Ensure scheduling on nodes with sufficient resources
      nodeSelector:
        kubernetes.io/arch: amd64
      
      # Tolerations for dedicated database nodes
      tolerations:
      - key: "database"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      # Service account for RBAC
      serviceAccountName: postgresql-service-account
      
      # Initialization containers for setup
      initContainers:
      - name: postgres-init-permissions
        image: postgres:16
        command:
        - /bin/bash
        - -c
        - |
          chown -R 999:999 /var/lib/postgresql/data
          chmod 700 /var/lib/postgresql/data
        securityContext:
          runAsUser: 0
          runAsNonRoot: false
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      
      containers:
      - name: postgresql
        image: postgres:16
        imagePullPolicy: IfNotPresent
        
        # Container ports
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        
        # Environment variables from ConfigMap and Secret
        envFrom:
        - configMapRef:
            name: postgres-config
        - secretRef:
            name: postgres-secret
        
        # Additional environment variables for optimization
        env:
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=md5 --auth-local=peer"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "md5"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        
        # Resource constraints for guaranteed QoS
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        
        # Security context for container
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - SETUID
            - SETGID
            - DAC_OVERRIDE
        
        # Volume mounts for data persistence and initialization
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: pgdata
        - name: init-db
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        - name: postgres-config-volume
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
        - name: postgres-tmp
          mountPath: /tmp
        - name: postgres-run
          mountPath: /var/run/postgresql
        
        # Liveness probe for container health
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              pg_isready -U $(POSTGRES_USER) -d $(POSTGRES_DB) -h localhost -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe for service availability
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              pg_isready -U $(POSTGRES_USER) -d $(POSTGRES_DB) -h localhost -p 5432 && 
              psql -U $(POSTGRES_USER) -d $(POSTGRES_DB) -c "SELECT 1" > /dev/null 2>&1
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for initial container readiness
        startupProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              pg_isready -U $(POSTGRES_USER) -d $(POSTGRES_DB) -h localhost -p 5432
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        # Lifecycle hooks for graceful shutdown
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                pg_ctl stop -D /var/lib/postgresql/data/pgdata -m fast
      
      # PostgreSQL Exporter for Prometheus monitoring
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.15.0
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_EXPORTER_URL
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: "/etc/postgres-exporter/queries.yaml"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: postgres-exporter-config
          mountPath: /etc/postgres-exporter
          readOnly: true
      
      # Volumes for persistent storage and configuration
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-db
        configMap:
          name: postgres-init-db-config
          defaultMode: 0755
      - name: postgres-config-volume
        configMap:
          name: postgres-config
          items:
          - key: postgresql.conf
            path: postgresql.conf
      - name: postgres-exporter-config
        configMap:
          name: postgres-exporter-config
      - name: postgres-tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: postgres-run
        emptyDir:
          sizeLimit: 100Mi
      
      # DNS configuration for service discovery
      dnsPolicy: ClusterFirst
      
      # Restart policy
      restartPolicy: Always
      
      # Termination grace period for graceful shutdown
      terminationGracePeriodSeconds: 60
      
      # Image pull secrets if using private registry
      imagePullSecrets:
      - name: docker-registry-secret