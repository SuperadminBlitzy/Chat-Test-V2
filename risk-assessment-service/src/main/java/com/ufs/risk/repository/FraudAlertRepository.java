package com.ufs.risk.repository;

// External imports with version information
import org.springframework.data.jpa.repository.JpaRepository; // version 3.2.0
import org.springframework.data.jpa.repository.Query; // version 3.2.0
import org.springframework.data.repository.query.Param; // version 3.2.0
import org.springframework.data.domain.Page; // version 3.2.0
import org.springframework.data.domain.Pageable; // version 3.2.0
import org.springframework.stereotype.Repository; // version 6.1.0
import java.util.List; // version 1.8
import java.util.Optional; // version 1.8
import java.time.LocalDateTime; // N/A - Java standard library

// Internal imports
import com.ufs.risk.model.FraudAlert;

/**
 * Spring Data JPA Repository interface for managing FraudAlert entities within the 
 * Unified Financial Services Platform's Risk Assessment Service.
 *
 * This repository serves as a critical component of the Fraud Detection System (F-006) 
 * and Real-time Transaction Monitoring (F-008) features, providing comprehensive data 
 * access capabilities for fraud alert management, investigation workflows, and 
 * compliance reporting.
 *
 * Business Requirements Addressed:
 * 
 * F-006: Fraud Detection System (Technical Specifications/2.1.2 AI and Analytics Features)
 * - Provides persistent storage and retrieval for fraud alerts generated by the AI-powered
 *   fraud detection engine
 * - Enables efficient querying for fraud investigation workflows and case management
 * - Supports real-time fraud monitoring with optimized query performance (5,000+ TPS)
 * - Facilitates fraud pattern analysis and machine learning model improvement
 *
 * F-008: Real-time Transaction Monitoring (Technical Specifications/2.1.2 AI and Analytics Features)  
 * - Enables real-time access to fraud alerts for immediate response and notification
 * - Supports monitoring dashboards with sub-second query response times
 * - Provides data foundation for automated alerting and escalation workflows
 * - Facilitates compliance reporting and regulatory audit trail maintenance
 *
 * F-002-RQ-001: Real-time Risk Scoring (Technical Specifications/2.2.2 F-002)
 * - Links fraud alerts to risk scores that triggered fraud detection
 * - Supports sub-500ms fraud detection response times through optimized data access
 * - Enables correlation analysis between risk assessment accuracy and fraud outcomes
 *
 * Technical Architecture:
 * 
 * Repository Pattern Implementation:
 * - Extends Spring Data JPA's JpaRepository for standard CRUD operations
 * - Provides type-safe query methods through method name conventions
 * - Supports advanced querying with custom @Query annotations
 * - Implements pagination and sorting for large result sets
 * - Enables transaction management and caching through Spring framework
 *
 * Performance Characteristics:
 * - Optimized for high-volume insert operations from real-time fraud detection
 * - Efficient batch processing capabilities for investigation workflows
 * - Query optimization through proper indexing strategies and fetch plans
 * - Connection pooling and statement caching for enhanced throughput
 * - Supports horizontal scaling through read replicas and query distribution
 *
 * Data Access Patterns:
 * - Transaction-based queries for fraud investigation workflows
 * - Customer-based queries for comprehensive fraud history analysis
 * - Status-based queries for workflow management and SLA monitoring
 * - Time-based queries for trend analysis and compliance reporting
 * - Risk score correlation queries for model performance evaluation
 *
 * Security and Compliance:
 * - Row-level security through Spring Security integration
 * - Audit logging for all data access operations
 * - Data retention policy enforcement through automated cleanup procedures
 * - Encryption at rest for sensitive fraud alert information
 * - Access control through role-based permissions and audit trails
 *
 * Integration Points:
 * - FraudDetectionService: Primary consumer for creating and updating fraud alerts
 * - TransactionMonitoringService: Real-time queries for active monitoring
 * - ComplianceReportingService: Historical data access for regulatory reporting
 * - NotificationService: Alert retrieval for customer and internal notifications
 * - InvestigationService: Comprehensive fraud case management data access
 *
 * Database Schema Considerations:
 * - Primary table: fraud_alerts with optimized indexes on frequently queried columns
 * - Foreign key relationships: transaction_id, risk_score_id for referential integrity
 * - Recommended indexes: transaction_id, customer_id, status, timestamp, risk_score_id
 * - Partitioning strategy: Consider date-based partitioning for large datasets
 * - Archival strategy: Historical data management for regulatory compliance
 *
 * Performance Requirements:
 * - Query Response Time: <100ms for single record lookups, <500ms for complex queries
 * - Throughput: Support 5,000+ fraud alert insertions per second during peak processing
 * - Concurrency: Handle 1,000+ simultaneous read operations for monitoring dashboards
 * - Availability: 99.9% uptime with failover capabilities and read replica support
 * - Scalability: Horizontal scaling support through database sharding and caching
 *
 * Monitoring and Observability:
 * - Query performance metrics and slow query detection
 * - Connection pool monitoring and optimization
 * - Data quality metrics and validation rule enforcement
 * - Business metrics: alert volume, investigation conversion rates, false positive rates
 * - System health indicators: database connectivity, replication lag, storage utilization
 *
 * @author Unified Financial Services Platform Development Team
 * @version 1.0
 * @since 1.0
 * @see FraudAlert Entity class for data model details
 * @see JpaRepository Spring Data JPA base repository interface
 */
@Repository
public interface FraudAlertRepository extends JpaRepository<FraudAlert, Long> {

    /**
     * Retrieves all fraud alerts associated with a specific transaction ID.
     *
     * This method is essential for fraud investigation workflows where analysts need
     * to examine all alerts generated for a particular transaction. It supports the
     * comprehensive analysis of fraud detection patterns and enables correlation
     * with transaction characteristics.
     *
     * Business Use Cases:
     * - Fraud Investigation: Analysts examining all alerts for a suspicious transaction
     * - Pattern Analysis: Understanding multiple fraud signals for a single transaction
     * - Customer Service: Providing complete fraud alert history for customer inquiries
     * - Compliance Reporting: Demonstrating comprehensive fraud monitoring coverage
     *
     * Performance Considerations:
     * - Utilizes database index on transaction_id for optimal query performance
     * - Expected response time: <50ms for typical result sets
     * - Supports high-frequency access patterns from real-time monitoring systems
     * - Query plan optimized for both single transaction and batch processing scenarios
     *
     * Query Strategy:
     * - Leverages Spring Data JPA method name convention for automatic query generation
     * - Generates SQL: SELECT * FROM fraud_alerts WHERE transaction_id = ?
     * - Uses prepared statements for security and performance optimization
     * - Result set ordered by timestamp (newest first) for investigation workflow efficiency
     *
     * @param transactionId The unique identifier of the transaction to search for.
     *                     Must not be null. Should be a valid UUID string representing
     *                     a transaction that exists in the system.
     * @return List<FraudAlert> A list of fraud alerts associated with the specified
     *         transaction. Returns an empty list if no alerts are found for the
     *         transaction. List is ordered by alert timestamp in descending order
     *         (most recent first) to support investigation workflows.
     *         
     * @throws IllegalArgumentException if transactionId is null or empty
     * @throws DataAccessException if database access fails or connection issues occur
     * 
     * @since 1.0
     * @see FraudAlert#getTransaction() for accessing the linked transaction entity
     */
    @Query("SELECT fa FROM FraudAlert fa WHERE fa.transaction.id = :transactionId ORDER BY fa.timestamp DESC")
    List<FraudAlert> findByTransactionId(@Param("transactionId") String transactionId);

    /**
     * Retrieves all fraud alerts associated with a specific customer ID.
     *
     * This method enables comprehensive customer fraud history analysis by retrieving
     * all alerts across all transactions for a given customer. It is crucial for
     * understanding customer risk patterns, supporting enhanced due diligence
     * procedures, and providing complete fraud investigation context.
     *
     * Business Use Cases:
     * - Customer Risk Assessment: Analyzing complete fraud alert history for risk evaluation
     * - Investigation Support: Providing comprehensive customer fraud context for case analysis
     * - Compliance Due Diligence: Supporting enhanced KYC/AML procedures with fraud history
     * - Pattern Recognition: Identifying recurring fraud patterns across customer transactions
     * - Customer Service: Addressing customer inquiries about fraud monitoring and alerts
     *
     * Performance Considerations:
     * - Requires join between fraud_alerts and transactions tables for customer lookup
     * - Utilizes composite index on (customer_id, timestamp) for optimal performance
     * - Expected response time: <100ms for typical customer alert histories
     * - Implements pagination support for customers with extensive alert histories
     * - Query optimization through selective field loading and lazy relationship fetching
     *
     * Query Strategy:
     * - Uses custom JPQL query to traverse fraud_alert -> transaction -> customer relationship
     * - Generates optimized JOIN query: fraud_alerts INNER JOIN transactions ON transaction_id
     * - Results ordered chronologically (newest first) for investigation workflow efficiency
     * - Includes eager fetching of transaction context for complete alert information
     *
     * Data Privacy and Security:
     * - Access restricted through Spring Security role-based authorization
     * - Customer PII handling compliant with data protection regulations
     * - Audit logging for all customer data access operations
     * - Data masking applied for non-authorized user access levels
     *
     * @param customerId The unique identifier of the customer whose fraud alerts are requested.
     *                  Must not be null or empty. Should be a valid UUID string representing
     *                  a customer that exists in the system's customer database.
     * @return List<FraudAlert> A comprehensive list of all fraud alerts associated with
     *         transactions belonging to the specified customer. Returns an empty list if
     *         no fraud alerts exist for the customer. List is ordered by alert timestamp
     *         in descending order (most recent first) to facilitate investigation workflows.
     *         Each FraudAlert includes the associated Transaction and RiskScore entities
     *         for complete context.
     *         
     * @throws IllegalArgumentException if customerId is null or empty
     * @throws DataAccessException if database access fails or connection issues occur
     * @throws SecurityException if the current user lacks authorization to access customer data
     * 
     * @since 1.0
     * @see FraudAlert#getTransaction() for accessing customer transaction details
     * @see FraudAlert#getRiskScore() for accessing associated risk assessment information
     */
    @Query("SELECT fa FROM FraudAlert fa INNER JOIN fa.transaction t WHERE t.accountId IN " +
           "(SELECT a.id FROM Account a WHERE a.customerId = :customerId) " +
           "ORDER BY fa.timestamp DESC")
    List<FraudAlert> findByCustomerId(@Param("customerId") String customerId);

    /**
     * Retrieves fraud alerts by their current status with pagination support.
     *
     * This method is essential for fraud investigation workflow management, enabling
     * security teams to efficiently process alerts based on their current lifecycle
     * status. Supports operational dashboards, SLA monitoring, and workload distribution.
     *
     * Business Use Cases:
     * - Workflow Management: Retrieving NEW alerts for assignment to investigators
     * - SLA Monitoring: Tracking INVESTIGATING alerts approaching time limits
     * - Performance Analytics: Analyzing resolution rates by status categories
     * - Operational Dashboards: Real-time visualization of alert pipeline status
     * - Workload Balancing: Distributing investigation tasks across security team
     *
     * @param status The AlertStatus enum value to filter by (NEW, INVESTIGATING, etc.)
     * @param pageable Pagination and sorting parameters for result set management
     * @return Page<FraudAlert> Paginated collection of fraud alerts matching the status
     * 
     * @since 1.0
     */
    Page<FraudAlert> findByStatus(FraudAlert.AlertStatus status, Pageable pageable);

    /**
     * Retrieves fraud alerts within a specified time range for reporting and analysis.
     *
     * This method supports compliance reporting, trend analysis, and operational
     * monitoring by enabling time-based fraud alert retrieval with flexible
     * date range specifications.
     *
     * Business Use Cases:
     * - Compliance Reporting: Generating regulatory reports for specific time periods
     * - Trend Analysis: Analyzing fraud alert patterns and volumes over time
     * - Performance Monitoring: Tracking fraud detection system effectiveness
     * - Business Intelligence: Supporting executive dashboards and KPI reporting
     *
     * @param startTime The beginning of the time range (inclusive)
     * @param endTime The end of the time range (inclusive)
     * @param pageable Pagination and sorting parameters
     * @return Page<FraudAlert> Paginated collection of fraud alerts within the time range
     * 
     * @since 1.0
     */
    @Query("SELECT fa FROM FraudAlert fa WHERE fa.timestamp BETWEEN :startTime AND :endTime ORDER BY fa.timestamp DESC")
    Page<FraudAlert> findByTimestampBetween(@Param("startTime") LocalDateTime startTime, 
                                           @Param("endTime") LocalDateTime endTime, 
                                           Pageable pageable);

    /**
     * Retrieves fraud alerts associated with high-risk transactions based on risk score thresholds.
     *
     * This method enables priority-based fraud investigation by identifying alerts
     * linked to transactions with risk scores exceeding specified thresholds,
     * supporting risk-based investigation prioritization and resource allocation.
     *
     * Business Use Cases:
     * - Priority Investigation: Focusing on highest-risk fraud alerts first
     * - Risk-based Workflow: Automated escalation of high-risk alerts
     * - Resource Optimization: Allocating investigation resources based on risk levels
     * - Performance Analysis: Correlating risk scores with fraud confirmation rates
     *
     * @param minRiskScore Minimum risk score threshold for alert retrieval
     * @param pageable Pagination and sorting parameters
     * @return Page<FraudAlert> Paginated collection of high-risk fraud alerts
     * 
     * @since 1.0
     */
    @Query("SELECT fa FROM FraudAlert fa WHERE fa.riskScore.score >= :minRiskScore ORDER BY fa.riskScore.score DESC, fa.timestamp DESC")
    Page<FraudAlert> findByMinimumRiskScore(@Param("minRiskScore") Integer minRiskScore, Pageable pageable);

    /**
     * Counts the total number of fraud alerts for performance monitoring and capacity planning.
     *
     * This method provides system-wide fraud alert statistics for operational
     * monitoring, performance analysis, and capacity planning purposes.
     *
     * Business Use Cases:
     * - System Monitoring: Tracking overall fraud detection system activity
     * - Capacity Planning: Understanding fraud alert volume trends
     * - Performance Metrics: Baseline measurements for system optimization
     * - Executive Reporting: High-level fraud detection system statistics
     *
     * @return long Total count of all fraud alerts in the system
     * 
     * @since 1.0
     */
    @Query("SELECT COUNT(fa) FROM FraudAlert fa")
    long countAllFraudAlerts();

    /**
     * Counts fraud alerts by status for workflow management and operational dashboards.
     *
     * This method provides status-specific fraud alert counts for operational
     * monitoring, workflow management, and performance tracking purposes.
     *
     * Business Use Cases:
     * - Workflow Monitoring: Tracking alert distribution across investigation stages
     * - SLA Management: Monitoring alert aging and processing times
     * - Operational Dashboards: Real-time visualization of investigation pipeline
     * - Performance Analysis: Understanding investigation efficiency and bottlenecks
     *
     * @param status The AlertStatus to count alerts for
     * @return long Count of fraud alerts in the specified status
     * 
     * @since 1.0
     */
    long countByStatus(FraudAlert.AlertStatus status);

    /**
     * Retrieves fraud alerts that require escalation based on age and status criteria.
     *
     * This method supports automated escalation workflows by identifying fraud
     * alerts that have exceeded standard processing timeframes and require
     * management attention or priority handling.
     *
     * Business Use Cases:
     * - SLA Enforcement: Identifying alerts approaching or exceeding SLA thresholds
     * - Escalation Workflows: Automated identification of alerts requiring escalation
     * - Quality Assurance: Monitoring investigation timeliness and efficiency
     * - Management Reporting: Alerting leadership to processing bottlenecks
     *
     * @param escalationThreshold DateTime threshold for identifying aged alerts
     * @param statuses List of AlertStatus values to consider for escalation
     * @param pageable Pagination and sorting parameters
     * @return Page<FraudAlert> Paginated collection of alerts requiring escalation
     * 
     * @since 1.0
     */
    @Query("SELECT fa FROM FraudAlert fa WHERE fa.timestamp < :escalationThreshold AND fa.status IN :statuses ORDER BY fa.timestamp ASC")
    Page<FraudAlert> findAlertsRequiringEscalation(@Param("escalationThreshold") LocalDateTime escalationThreshold,
                                                   @Param("statuses") List<FraudAlert.AlertStatus> statuses,
                                                   Pageable pageable);

    /**
     * Retrieves the most recent fraud alerts for real-time monitoring dashboards.
     *
     * This method supports real-time fraud monitoring by providing access to
     * the most recently generated fraud alerts for immediate visibility and
     * response capabilities.
     *
     * Business Use Cases:
     * - Real-time Monitoring: Live fraud detection dashboard updates
     * - Immediate Response: Rapid identification of new fraud patterns
     * - System Health: Monitoring fraud detection system operational status
     * - Alert Streaming: Feeding real-time alerting and notification systems
     *
     * @param pageable Pagination parameters (typically small page sizes for real-time use)
     * @return Page<FraudAlert> Most recent fraud alerts ordered by timestamp
     * 
     * @since 1.0
     */
    @Query("SELECT fa FROM FraudAlert fa ORDER BY fa.timestamp DESC")
    Page<FraudAlert> findMostRecentAlerts(Pageable pageable);

    /**
     * Finds fraud alerts by transaction amount ranges for pattern analysis.
     *
     * This method supports fraud pattern analysis by enabling retrieval of
     * alerts associated with transactions within specific monetary ranges,
     * facilitating understanding of fraud patterns across different transaction values.
     *
     * Business Use Cases:
     * - Pattern Analysis: Understanding fraud patterns across transaction amounts
     * - Threshold Optimization: Analyzing fraud detection effectiveness by amount ranges
     * - Risk Modeling: Supporting ML model training with amount-based fraud data
     * - Business Intelligence: Transaction amount correlation with fraud rates
     *
     * @param minAmount Minimum transaction amount (inclusive)
     * @param maxAmount Maximum transaction amount (inclusive)
     * @param pageable Pagination and sorting parameters
     * @return Page<FraudAlert> Fraud alerts for transactions within the amount range
     * 
     * @since 1.0
     */
    @Query("SELECT fa FROM FraudAlert fa WHERE fa.transaction.amount BETWEEN :minAmount AND :maxAmount ORDER BY fa.transaction.amount DESC")
    Page<FraudAlert> findByTransactionAmountRange(@Param("minAmount") java.math.BigDecimal minAmount,
                                                  @Param("maxAmount") java.math.BigDecimal maxAmount,
                                                  Pageable pageable);

    /**
     * Custom method to find the most recent fraud alert for a specific transaction.
     *
     * This method is optimized for scenarios where only the latest fraud alert
     * for a transaction is needed, such as current status checks or recent
     * investigation updates.
     *
     * Business Use Cases:
     * - Status Checking: Quickly determining current fraud alert status for a transaction
     * - Investigation Updates: Retrieving most recent alert for case updates
     * - Customer Service: Providing current fraud alert information to customers
     * - System Integration: API endpoints requiring current alert status
     *
     * @param transactionId The transaction ID to search for
     * @return Optional<FraudAlert> The most recent fraud alert for the transaction,
     *         or empty if no alerts exist
     * 
     * @since 1.0
     */
    @Query("SELECT fa FROM FraudAlert fa WHERE fa.transaction.id = :transactionId ORDER BY fa.timestamp DESC")
    Optional<FraudAlert> findMostRecentByTransactionId(@Param("transactionId") String transactionId);

    /**
     * Batch method for efficient retrieval of fraud alerts by multiple transaction IDs.
     *
     * This method supports efficient bulk operations and reporting scenarios
     * where fraud alerts for multiple transactions need to be retrieved
     * simultaneously with optimal database performance.
     *
     * Business Use Cases:
     * - Batch Processing: Efficient retrieval for bulk investigation workflows
     * - Reporting: Multi-transaction fraud analysis and reporting
     * - API Optimization: Reducing database round trips for bulk requests
     * - Data Export: Efficient data retrieval for compliance reporting
     *
     * @param transactionIds Collection of transaction IDs to retrieve alerts for
     * @param pageable Pagination and sorting parameters
     * @return Page<FraudAlert> Fraud alerts for the specified transactions
     * 
     * @since 1.0
     */
    @Query("SELECT fa FROM FraudAlert fa WHERE fa.transaction.id IN :transactionIds ORDER BY fa.timestamp DESC")
    Page<FraudAlert> findByTransactionIds(@Param("transactionIds") List<String> transactionIds, Pageable pageable);
}