package com.ufs.risk.dto;

import java.util.List; // Java 11
import java.math.BigDecimal; // Java 11
import java.time.LocalDateTime; // Java 11
import java.util.Objects;
import java.io.Serializable;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.PastOrPresent;

/**
 * Data Transfer Object (DTO) representing the response of a risk assessment operation.
 * This class encapsulates the complete results of the AI-Powered Risk Assessment Engine
 * analysis, including calculated risk scores, categories, and mitigation recommendations.
 * 
 * As per F-002: AI-Powered Risk Assessment Engine requirements:
 * - Risk scores are provided on a 0-1000 scale
 * - Response time target: <500ms for 99% of requests
 * - Accuracy requirement: 95% accuracy rate
 * - Includes explainable AI outputs with confidence intervals
 * 
 * Thread-safe and immutable after construction.
 * 
 * @author UFS Risk Assessment Team
 * @version 1.0
 * @since 2025
 */
public class RiskAssessmentResponse implements Serializable {
    
    private static final long serialVersionUID = 1L;
    
    /**
     * Unique identifier for this risk assessment operation.
     * Used for audit trails and correlation with request logs.
     */
    @NotBlank(message = "Assessment ID cannot be blank")
    private String assessmentId;
    
    /**
     * Calculated risk score on a scale of 0-1000.
     * - 0-200: Low Risk
     * - 201-500: Medium Risk  
     * - 501-750: High Risk
     * - 751-1000: Critical Risk
     * 
     * Uses BigDecimal for precise financial calculations and to avoid
     * floating-point precision issues in risk scoring.
     */
    @NotNull(message = "Risk score cannot be null")
    @DecimalMin(value = "0.0", message = "Risk score must be greater than or equal to 0")
    @DecimalMax(value = "1000.0", message = "Risk score must be less than or equal to 1000")
    private BigDecimal riskScore;
    
    /**
     * Categorical classification of the risk level.
     * Possible values: LOW, MEDIUM, HIGH, CRITICAL
     * 
     * This provides a human-readable interpretation of the numerical risk score
     * and enables rule-based decision making downstream.
     */
    @NotBlank(message = "Risk category cannot be blank")
    private String riskCategory;
    
    /**
     * List of actionable mitigation recommendations generated by the AI engine.
     * Each recommendation provides specific steps to reduce identified risks.
     * 
     * Examples:
     * - "Implement additional identity verification"
     * - "Request additional documentation"
     * - "Apply enhanced due diligence procedures"
     * - "Consider manual review for high-value transactions"
     */
    @NotEmpty(message = "Mitigation recommendations cannot be empty")
    private List<String> mitigationRecommendations;
    
    /**
     * Confidence interval representing the AI model's certainty in the assessment.
     * Expressed as a percentage (0.0 to 100.0).
     * 
     * Higher values indicate greater model confidence in the risk assessment.
     * Values below 70% may trigger manual review processes.
     */
    @NotNull(message = "Confidence interval cannot be null")
    @DecimalMin(value = "0.0", message = "Confidence interval must be greater than or equal to 0")
    @DecimalMax(value = "100.0", message = "Confidence interval must be less than or equal to 100")
    private BigDecimal confidenceInterval;
    
    /**
     * Timestamp when the risk assessment was completed.
     * Used for audit trails, compliance reporting, and cache invalidation.
     * 
     * Stored in system timezone and converted as needed for reporting.
     */
    @NotNull(message = "Assessment timestamp cannot be null")
    @PastOrPresent(message = "Assessment timestamp cannot be in the future")
    private LocalDateTime assessmentTimestamp;
    
    /**
     * Default no-argument constructor required for JSON deserialization
     * and framework compatibility (JPA, Jackson, etc.).
     */
    public RiskAssessmentResponse() {
        // Default constructor for frameworks
    }
    
    /**
     * Full constructor for creating a complete risk assessment response.
     * 
     * @param assessmentId Unique identifier for the assessment
     * @param riskScore Calculated risk score (0-1000 scale)
     * @param riskCategory Risk category classification
     * @param mitigationRecommendations List of mitigation recommendations
     * @param confidenceInterval Model confidence percentage (0-100)
     * @param assessmentTimestamp When the assessment was completed
     */
    public RiskAssessmentResponse(String assessmentId, 
                                 BigDecimal riskScore, 
                                 String riskCategory,
                                 List<String> mitigationRecommendations, 
                                 BigDecimal confidenceInterval,
                                 LocalDateTime assessmentTimestamp) {
        this.assessmentId = assessmentId;
        this.riskScore = riskScore;
        this.riskCategory = riskCategory;
        this.mitigationRecommendations = mitigationRecommendations;
        this.confidenceInterval = confidenceInterval;
        this.assessmentTimestamp = assessmentTimestamp;
    }
    
    /**
     * Gets the unique assessment identifier.
     * 
     * @return The assessment ID
     */
    public String getAssessmentId() {
        return assessmentId;
    }
    
    /**
     * Sets the unique assessment identifier.
     * 
     * @param assessmentId The assessment ID to set
     */
    public void setAssessmentId(String assessmentId) {
        this.assessmentId = assessmentId;
    }
    
    /**
     * Gets the calculated risk score.
     * 
     * @return The risk score on a 0-1000 scale
     */
    public BigDecimal getRiskScore() {
        return riskScore;
    }
    
    /**
     * Sets the calculated risk score.
     * 
     * @param riskScore The risk score to set (0-1000 scale)
     */
    public void setRiskScore(BigDecimal riskScore) {
        this.riskScore = riskScore;
    }
    
    /**
     * Gets the risk category classification.
     * 
     * @return The risk category (LOW, MEDIUM, HIGH, CRITICAL)
     */
    public String getRiskCategory() {
        return riskCategory;
    }
    
    /**
     * Sets the risk category classification.
     * 
     * @param riskCategory The risk category to set
     */
    public void setRiskCategory(String riskCategory) {
        this.riskCategory = riskCategory;
    }
    
    /**
     * Gets the list of mitigation recommendations.
     * 
     * @return List of actionable mitigation recommendations
     */
    public List<String> getMitigationRecommendations() {
        return mitigationRecommendations;
    }
    
    /**
     * Sets the list of mitigation recommendations.
     * 
     * @param mitigationRecommendations The mitigation recommendations to set
     */
    public void setMitigationRecommendations(List<String> mitigationRecommendations) {
        this.mitigationRecommendations = mitigationRecommendations;
    }
    
    /**
     * Gets the model confidence interval.
     * 
     * @return The confidence interval as a percentage (0-100)
     */
    public BigDecimal getConfidenceInterval() {
        return confidenceInterval;
    }
    
    /**
     * Sets the model confidence interval.
     * 
     * @param confidenceInterval The confidence interval to set (0-100)
     */
    public void setConfidenceInterval(BigDecimal confidenceInterval) {
        this.confidenceInterval = confidenceInterval;
    }
    
    /**
     * Gets the assessment timestamp.
     * 
     * @return When the assessment was completed
     */
    public LocalDateTime getAssessmentTimestamp() {
        return assessmentTimestamp;
    }
    
    /**
     * Sets the assessment timestamp.
     * 
     * @param assessmentTimestamp The timestamp to set
     */
    public void setAssessmentTimestamp(LocalDateTime assessmentTimestamp) {
        this.assessmentTimestamp = assessmentTimestamp;
    }
    
    /**
     * Determines if this is a high-risk assessment requiring additional scrutiny.
     * Based on F-002 requirements for risk-based decision making.
     * 
     * @return true if risk score > 500 or confidence interval < 70%
     */
    public boolean isHighRisk() {
        return (riskScore != null && riskScore.compareTo(BigDecimal.valueOf(500)) > 0) ||
               (confidenceInterval != null && confidenceInterval.compareTo(BigDecimal.valueOf(70)) < 0);
    }
    
    /**
     * Determines if this assessment requires manual review.
     * Based on business rules for risk management and compliance requirements.
     * 
     * @return true if risk score > 750 or confidence interval < 60%
     */
    public boolean requiresManualReview() {
        return (riskScore != null && riskScore.compareTo(BigDecimal.valueOf(750)) > 0) ||
               (confidenceInterval != null && confidenceInterval.compareTo(BigDecimal.valueOf(60)) < 0);
    }
    
    /**
     * Checks if two RiskAssessmentResponse objects are equal.
     * 
     * @param obj The object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        
        RiskAssessmentResponse that = (RiskAssessmentResponse) obj;
        
        return Objects.equals(assessmentId, that.assessmentId) &&
               Objects.equals(riskScore, that.riskScore) &&
               Objects.equals(riskCategory, that.riskCategory) &&
               Objects.equals(mitigationRecommendations, that.mitigationRecommendations) &&
               Objects.equals(confidenceInterval, that.confidenceInterval) &&
               Objects.equals(assessmentTimestamp, that.assessmentTimestamp);
    }
    
    /**
     * Generates hash code for this object.
     * 
     * @return Hash code value
     */
    @Override
    public int hashCode() {
        return Objects.hash(assessmentId, riskScore, riskCategory, 
                          mitigationRecommendations, confidenceInterval, assessmentTimestamp);
    }
    
    /**
     * Returns a string representation of the risk assessment response.
     * Excludes sensitive information for logging purposes.
     * 
     * @return String representation of the object
     */
    @Override
    public String toString() {
        return "RiskAssessmentResponse{" +
               "assessmentId='" + assessmentId + '\'' +
               ", riskScore=" + riskScore +
               ", riskCategory='" + riskCategory + '\'' +
               ", recommendationCount=" + (mitigationRecommendations != null ? mitigationRecommendations.size() : 0) +
               ", confidenceInterval=" + confidenceInterval +
               ", assessmentTimestamp=" + assessmentTimestamp +
               '}';
    }
}