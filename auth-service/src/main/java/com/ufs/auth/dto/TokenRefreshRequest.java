package com.ufs.auth.dto;

import jakarta.validation.constraints.NotBlank; // v3.0.2

/**
 * Data Transfer Object (DTO) for handling token refresh requests in the Unified Financial Services Platform.
 * 
 * This record encapsulates the refresh token sent by the client when requesting a new access token
 * as part of the JWT-based authentication and authorization mechanism. It supports the platform's
 * real-time data synchronization requirements by providing secure token refresh capabilities.
 * 
 * <p>Key Features:</p>
 * <ul>
 *   <li>Immutable record structure for thread-safe token handling</li>
 *   <li>Input validation to ensure refresh token integrity</li>
 *   <li>Compliance with F-001-RQ-001 (Real-time data synchronization)</li>
 *   <li>Part of the authentication service's token management lifecycle</li>
 * </ul>
 * 
 * <p>Security Considerations:</p>
 * <ul>
 *   <li>Validates that refresh token is not null or empty</li>
 *   <li>Ensures token contains at least one non-whitespace character</li>
 *   <li>Supports enterprise-grade authentication flow</li>
 * </ul>
 * 
 * <p>Business Context:</p>
 * This DTO is essential for maintaining secure user sessions in the financial services platform,
 * enabling seamless user experience while adhering to strict security requirements mandated
 * by financial regulations and the platform's 99.99% uptime requirements.
 * 
 * @param refreshToken The JWT refresh token provided by the client for token renewal.
 *                     Must not be null, empty, or contain only whitespace characters.
 * 
 * @see jakarta.validation.constraints.NotBlank
 * @see <a href="https://tools.ietf.org/html/rfc7519">RFC 7519 - JSON Web Token (JWT)</a>
 * 
 * @author Unified Financial Services Platform - Authentication Service
 * @version 1.0
 * @since 1.0
 */
public record TokenRefreshRequest(
    /**
     * The refresh token used to obtain a new access token.
     * 
     * <p>Validation Rules:</p>
     * <ul>
     *   <li>Must not be null</li>
     *   <li>Must not be empty string</li>
     *   <li>Must contain at least one non-whitespace character</li>
     * </ul>
     * 
     * <p>This token is typically a long-lived JWT that allows the client to obtain
     * new access tokens without requiring the user to re-authenticate. The token
     * should be securely stored on the client side and transmitted over HTTPS.</p>
     * 
     * @validation NotBlank - Ensures the refresh token meets minimum security requirements
     */
    @NotBlank(message = "Refresh token cannot be null, empty, or contain only whitespace characters")
    String refreshToken
) {
    
    /**
     * Default constructor for the TokenRefreshRequest record.
     * 
     * <p>This constructor is automatically generated by the Java record mechanism
     * and performs the following operations:</p>
     * <ul>
     *   <li>Initializes the TokenRefreshRequest with the provided refresh token</li>
     *   <li>Triggers validation annotations (@NotBlank) during object creation</li>
     *   <li>Ensures immutability of the created instance</li>
     * </ul>
     * 
     * <p>Usage Example:</p>
     * <pre>{@code
     * TokenRefreshRequest request = new TokenRefreshRequest("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...");
     * }</pre>
     * 
     * @param refreshToken The JWT refresh token string that must pass validation
     * @throws jakarta.validation.ConstraintViolationException if validation fails
     * 
     * @implNote The constructor validation is automatically handled by the Bean Validation
     *           framework when used within Spring Boot's validation context.
     */
    public TokenRefreshRequest {
        // Compact constructor body for record - validation is handled by annotations
        // The record automatically generates the constructor, equals(), hashCode(), 
        // toString(), and accessor methods while maintaining immutability
    }
    
    /**
     * Returns the refresh token value.
     * 
     * <p>This accessor method is automatically generated by the Java record mechanism.
     * It provides read-only access to the refresh token value while maintaining
     * the immutable nature of the record.</p>
     * 
     * @return The refresh token string used for authentication token renewal
     * @apiNote This method is part of the public API and can be used by the
     *          authentication service to extract the token for processing
     */
    // Accessor method is automatically generated by record
    
    /**
     * Custom toString implementation note.
     * 
     * <p>The automatically generated toString() method will include the refresh token value.
     * In production environments, consider implementing a custom toString() that masks
     * sensitive token information for logging purposes to prevent token exposure in logs.</p>
     * 
     * @implNote For security reasons, the default toString() should be carefully used
     *           in logging contexts to avoid token leakage
     */
    // toString() method is automatically generated by record
    
    /**
     * Equality and hash code implementation note.
     * 
     * <p>The record automatically generates equals() and hashCode() methods based on
     * the refresh token value. This ensures proper behavior when using the DTO in
     * collections or as map keys during token management operations.</p>
     * 
     * @implNote The generated equals() method provides structural equality based on
     *           the refresh token string value
     */
    // equals() and hashCode() methods are automatically generated by record
}