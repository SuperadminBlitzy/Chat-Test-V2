package com.ufs.analytics.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;

/**
 * Data Transfer Object (DTO) for sending report data in API responses.
 * 
 * This class encapsulates the data of a generated report to be sent to the client
 * and serves multiple critical business functions across the unified financial services platform:
 * 
 * <ul>
 *   <li><strong>F-005: Predictive Analytics Dashboard</strong> - Transfers data for reports 
 *       displayed on the AI-powered analytics dashboard, enabling real-time financial insights 
 *       and risk assessment visualization</li>
 *   <li><strong>F-012: Settlement Reconciliation Engine</strong> - Carries data for settlement 
 *       reconciliation reports in blockchain-based settlement processing, ensuring transaction 
 *       integrity and compliance</li>
 *   <li><strong>F-015: Compliance Control Center</strong> - Transfers data for regulatory 
 *       compliance reports displayed in the compliance control interface, supporting automated 
 *       regulatory monitoring and reporting</li>
 * </ul>
 * 
 * <p>This DTO is designed to handle various report types including:</p>
 * <ul>
 *   <li>Predictive analytics reports with AI-generated insights</li>
 *   <li>Settlement reconciliation reports for blockchain transactions</li>
 *   <li>Regulatory compliance reports for audit and monitoring</li>
 *   <li>Risk assessment reports for real-time decision making</li>
 *   <li>Customer analytics reports for personalized services</li>
 * </ul>
 * 
 * <p>The class uses Lombok annotations to reduce boilerplate code while maintaining 
 * enterprise-grade functionality. All fields are designed to support the high-performance 
 * requirements of financial services (&lt;1 second response times, 10,000+ TPS capacity).</p>
 * 
 * @author UFS Analytics Service
 * @version 1.0
 * @since 2025-01-01
 */
@Data // Lombok: Generates getters, setters, toString, equals, and hashCode methods
@NoArgsConstructor // Lombok: Generates a no-argument constructor for framework compatibility
@AllArgsConstructor // Lombok: Generates a constructor with all fields as parameters
public class ReportResponse {

    /**
     * Unique identifier for the report.
     * 
     * <p>This field serves as the primary key for report identification across the system.
     * It enables report tracking, caching, and retrieval in distributed microservices
     * architecture. The ID is typically generated by the analytics service and used
     * for audit trails and compliance tracking.</p>
     * 
     * <p>Format: UUID or system-generated unique string</p>
     * <p>Example: "RPT-2025-001-PRED-ANALYTICS" or "550e8400-e29b-41d4-a716-446655440000"</p>
     */
    private String reportId;

    /**
     * Human-readable name of the report.
     * 
     * <p>This field provides a descriptive name for the report that is displayed 
     * in user interfaces across the platform. It supports multiple languages and 
     * special characters to accommodate global financial services requirements.</p>
     * 
     * <p>Examples:</p>
     * <ul>
     *   <li>"Monthly Risk Assessment Report"</li>
     *   <li>"Settlement Reconciliation Summary"</li>
     *   <li>"Compliance Audit Report - Q1 2025"</li>
     *   <li>"Predictive Analytics Dashboard - Customer Segments"</li>
     * </ul>
     */
    private String reportName;

    /**
     * Type or category of the report.
     * 
     * <p>This field categorizes the report for proper handling, routing, and display
     * within the appropriate dashboard or control center. It enables the system to
     * apply specific formatting, validation, and processing rules based on report type.</p>
     * 
     * <p>Supported report types include:</p>
     * <ul>
     *   <li><strong>PREDICTIVE_ANALYTICS</strong> - AI-generated insights and forecasts</li>
     *   <li><strong>SETTLEMENT_RECONCILIATION</strong> - Blockchain settlement reports</li>
     *   <li><strong>COMPLIANCE_AUDIT</strong> - Regulatory compliance reports</li>
     *   <li><strong>RISK_ASSESSMENT</strong> - Risk scoring and analysis reports</li>
     *   <li><strong>CUSTOMER_ANALYTICS</strong> - Customer behavior and segmentation</li>
     *   <li><strong>FINANCIAL_PERFORMANCE</strong> - Financial metrics and KPIs</li>
     *   <li><strong>FRAUD_DETECTION</strong> - Security and fraud analysis</li>
     * </ul>
     */
    private String reportType;

    /**
     * Timestamp indicating when the report was generated.
     * 
     * <p>This field captures the exact moment when the report was created by the 
     * analytics service. It is crucial for audit trails, compliance reporting, 
     * and data freshness validation. The timestamp is stored in the system's 
     * default timezone and should be converted to appropriate client timezones 
     * for display purposes.</p>
     * 
     * <p>The timestamp supports:</p>
     * <ul>
     *   <li>Audit trail requirements for regulatory compliance</li>
     *   <li>Report freshness validation for real-time analytics</li>
     *   <li>Data lineage tracking for AI/ML model outputs</li>
     *   <li>Cache invalidation for performance optimization</li>
     * </ul>
     * 
     * <p>Format: ISO 8601 standard (yyyy-MM-dd'T'HH:mm:ss)</p>
     * <p>Example: 2025-01-15T14:30:45.123</p>
     */
    private LocalDateTime generatedAt;

    /**
     * The actual content or data of the report.
     * 
     * <p>This field contains the report's primary data, which can be in various formats
     * depending on the report type and intended use. For performance and flexibility,
     * the content is stored as a string that can contain:</p>
     * 
     * <ul>
     *   <li><strong>JSON</strong> - Structured data for API consumption and dashboard display</li>
     *   <li><strong>XML</strong> - Regulatory reports requiring specific schema compliance</li>
     *   <li><strong>CSV</strong> - Tabular data for spreadsheet compatibility</li>
     *   <li><strong>HTML</strong> - Pre-formatted reports for web display</li>
     *   <li><strong>Base64</strong> - Encoded binary data for charts, graphs, or documents</li>
     * </ul>
     * 
     * <p>Content validation and parsing should be performed based on the 
     * corresponding 'format' field to ensure data integrity and proper handling.</p>
     * 
     * <p><strong>Security Note:</strong> Sensitive financial data within the content 
     * should be encrypted at rest and in transit, following financial industry 
     * security standards (PCI DSS, SOX compliance).</p>
     */
    private String content;

    /**
     * Format specification for the report content.
     * 
     * <p>This field specifies the format of the data contained in the 'content' field,
     * enabling proper parsing, validation, and display by consuming applications.
     * It supports MIME type notation and custom format specifications.</p>
     * 
     * <p>Supported formats include:</p>
     * <ul>
     *   <li><strong>application/json</strong> - JSON format for API consumption</li>
     *   <li><strong>application/xml</strong> - XML format for regulatory compliance</li>
     *   <li><strong>text/csv</strong> - CSV format for data analysis</li>
     *   <li><strong>text/html</strong> - HTML format for web display</li>
     *   <li><strong>application/pdf</strong> - PDF format for document generation</li>
     *   <li><strong>image/png</strong> - PNG format for charts and visualizations</li>
     *   <li><strong>application/base64</strong> - Base64 encoded binary data</li>
     * </ul>
     * 
     * <p>The format field enables:</p>
     * <ul>
     *   <li>Automatic content-type detection for HTTP responses</li>
     *   <li>Proper parsing and validation of report data</li>
     *   <li>Appropriate rendering in user interfaces</li>
     *   <li>Content negotiation for multi-format support</li>
     * </ul>
     */
    private String format;

    /**
     * Custom constructor for creating ReportResponse instances with all required fields.
     * 
     * <p>This constructor is automatically generated by Lombok's @AllArgsConstructor
     * annotation and provides a convenient way to create fully initialized instances
     * of the ReportResponse class. It ensures all fields are properly set during
     * object construction, supporting immutable object patterns when needed.</p>
     * 
     * <p>The constructor follows the field declaration order and supports the
     * following usage patterns:</p>
     * <ul>
     *   <li>Service layer object creation with complete data</li>
     *   <li>Builder pattern implementation for complex report construction</li>
     *   <li>Unit testing with mock data generation</li>
     *   <li>Data transfer between microservices</li>
     * </ul>
     * 
     * @param reportId Unique identifier for the report
     * @param reportName Human-readable name of the report
     * @param reportType Type or category of the report
     * @param generatedAt Timestamp when the report was generated
     * @param content The actual content or data of the report
     * @param format Format specification for the report content
     */
    // Constructor implementation is automatically generated by Lombok @AllArgsConstructor

    /**
     * Default no-argument constructor for framework compatibility.
     * 
     * <p>This constructor is automatically generated by Lombok's @NoArgsConstructor
     * annotation and is required for proper functioning with various frameworks
     * and libraries used in the financial services platform:</p>
     * 
     * <ul>
     *   <li><strong>Spring Boot</strong> - JSON deserialization in REST controllers</li>
     *   <li><strong>JPA/Hibernate</strong> - Entity instantiation and persistence</li>
     *   <li><strong>Jackson</strong> - JSON/XML serialization and deserialization</li>
     *   <li><strong>MapStruct</strong> - DTO mapping between layers</li>
     *   <li><strong>Bean Validation</strong> - JSR-303 validation framework</li>
     * </ul>
     * 
     * <p>The no-argument constructor ensures compatibility with reflection-based
     * frameworks while maintaining the benefits of Lombok's code generation.</p>
     */
    // Constructor implementation is automatically generated by Lombok @NoArgsConstructor

    // Additional methods (getters, setters, toString, equals, hashCode) are 
    // automatically generated by Lombok @Data annotation, providing:
    // 
    // - Thread-safe property access methods
    // - Consistent object representation for logging and debugging
    // - Proper equality and hash code implementation for collections and caching
    // - Full IDE integration with auto-completion and refactoring support
}