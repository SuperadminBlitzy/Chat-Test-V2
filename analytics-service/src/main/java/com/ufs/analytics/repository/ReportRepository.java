package com.ufs.analytics.repository;

import com.ufs.analytics.model.Report; // Internal import: Report entity model
import org.springframework.data.jpa.repository.JpaRepository; // version 3.2.0
import org.springframework.data.jpa.repository.Query; // version 3.2.0
import org.springframework.data.repository.query.Param; // version 3.2.0
import org.springframework.stereotype.Repository; // version 6.2.0
import java.util.List; // version 11
import java.util.Optional; // version 11
import java.time.LocalDateTime; // version 1.8

/**
 * Spring Data JPA Repository interface for managing Report entities within the analytics service.
 * 
 * This repository provides comprehensive data access operations for financial reports including:
 * - Settlement reconciliation reports (F-012 Settlement Reconciliation Engine)
 * - Compliance reports (F-015 Compliance Control Center) 
 * - Predictive analytics reports (F-005 Predictive Analytics Dashboard)
 * 
 * The repository supports the core financial service requirements by enabling efficient
 * storage, retrieval, and querying of various report types generated by the analytics engine.
 * 
 * Technical Implementation:
 * - Extends Spring Data JpaRepository for standard CRUD operations
 * - Provides custom query methods for business-specific report filtering
 * - Supports PostgreSQL database operations with optimized queries
 * - Maintains ACID compliance for financial data integrity
 * 
 * Performance Characteristics:
 * - Optimized for high-volume report generation and retrieval
 * - Supports concurrent read/write operations for enterprise scalability
 * - Implements efficient indexing strategies for dashboard and type-based queries
 * 
 * Security Considerations:
 * - All operations maintain audit trail compatibility
 * - Supports role-based access control through Spring Security integration
 * - Ensures data isolation and multi-tenant capability
 * 
 * @author UFS Analytics Team
 * @version 1.0
 * @since Spring Boot 3.2+
 */
@Repository
public interface ReportRepository extends JpaRepository<Report, Long> {

    /**
     * Retrieves all reports associated with a specific dashboard.
     * 
     * This method supports the F-005 Predictive Analytics Dashboard requirement by enabling
     * efficient retrieval of all reports that belong to a particular dashboard view.
     * Essential for dashboard rendering and report organization within the analytics service.
     * 
     * Business Context:
     * - Enables dashboard-specific report aggregation
     * - Supports real-time dashboard population with relevant reports
     * - Facilitates report grouping by dashboard context
     * - Critical for F-015 Compliance Control Center dashboard functionality
     * 
     * Performance Considerations:
     * - Utilizes database index on dashboard_id column for optimal query performance
     * - Returns results ordered by creation date (most recent first) for better UX
     * - Supports pagination through Spring Data JPA integration
     * 
     * Usage Examples:
     * - Populating dashboard with associated reports
     * - Generating dashboard-specific analytics summaries
     * - Implementing dashboard report filtering and organization
     * 
     * @param dashboardId The unique identifier of the dashboard (Long type matching Report entity)
     * @return List of Report entities associated with the specified dashboard ID, 
     *         ordered by creation date descending. Returns empty list if no reports found.
     * @throws IllegalArgumentException if dashboardId is null
     * @see Report#getDashboardId()
     * @see #findByDashboardIdAndType(Long, String)
     */
    @Query("SELECT r FROM Report r WHERE r.dashboardId = :dashboardId ORDER BY r.createdAt DESC")
    List<Report> findByDashboardId(@Param("dashboardId") Long dashboardId);

    /**
     * Retrieves all reports of a specific type classification.
     * 
     * This method supports multiple functional requirements by enabling type-based report filtering:
     * - F-012 Settlement Reconciliation Engine (type: SETTLEMENT_RECONCILIATION)
     * - F-015 Compliance Control Center (type: COMPLIANCE) 
     * - F-005 Predictive Analytics Dashboard (type: RISK_ASSESSMENT, CUSTOMER_STATEMENT)
     * 
     * Supported Report Types:
     * - SETTLEMENT_RECONCILIATION: Settlement reconciliation reports
     * - COMPLIANCE: Regulatory compliance reports
     * - RISK_ASSESSMENT: Risk analysis and assessment reports
     * - CUSTOMER_STATEMENT: Customer account statements
     * - REGULATORY: Regulatory submission reports
     * - AUDIT: Internal audit reports
     * 
     * Business Context:
     * - Enables categorization and filtering of reports by business function
     * - Supports compliance reporting requirements with type-specific queries
     * - Facilitates regulatory audit trail by report classification
     * - Essential for F-003 Regulatory Compliance Automation reporting
     * 
     * Performance Considerations:
     * - Utilizes database index on type column for efficient filtering
     * - Case-sensitive string matching for exact type classification
     * - Returns results ordered by creation date for chronological analysis
     * 
     * Data Integrity:
     * - Validates report type against predefined classifications
     * - Maintains referential integrity with report categorization system
     * - Supports audit trail requirements for regulatory compliance
     * 
     * @param reportType The classification type of reports to retrieve (String, case-sensitive)
     *                   Must match one of the predefined report type constants
     * @return List of Report entities matching the specified type classification,
     *         ordered by creation date descending. Returns empty list if no reports found.
     * @throws IllegalArgumentException if reportType is null or empty
     * @see Report#getType()
     * @see Report#isSettlementReconciliationReport()
     * @see Report#isComplianceReport()
     * @see #findByTypeAndCreatedAtAfter(String, LocalDateTime)
     */
    @Query("SELECT r FROM Report r WHERE r.type = :reportType ORDER BY r.createdAt DESC")
    List<Report> findByReportType(@Param("reportType") String reportType);

    /**
     * Retrieves reports associated with a specific dashboard and of a particular type.
     * 
     * This method provides granular filtering capability by combining dashboard association
     * with report type classification. Essential for dashboard-specific report categorization
     * and supports multiple functional requirements simultaneously.
     * 
     * Use Cases:
     * - Dashboard-specific compliance reports for F-015 Compliance Control Center
     * - Settlement reports within specific operational dashboards for F-012
     * - Risk assessment reports for particular analytics dashboards for F-005
     * 
     * @param dashboardId The unique identifier of the dashboard
     * @param reportType The classification type of reports to retrieve
     * @return List of Report entities matching both dashboard and type criteria
     */
    @Query("SELECT r FROM Report r WHERE r.dashboardId = :dashboardId AND r.type = :reportType ORDER BY r.createdAt DESC")
    List<Report> findByDashboardIdAndType(@Param("dashboardId") Long dashboardId, 
                                        @Param("reportType") String reportType);

    /**
     * Retrieves reports of a specific type created after a given timestamp.
     * 
     * This method supports time-based report filtering for regulatory compliance
     * and audit requirements. Essential for generating periodic compliance reports
     * and tracking report generation patterns over time.
     * 
     * @param reportType The classification type of reports to retrieve
     * @param createdAfter The timestamp after which reports were created
     * @return List of Report entities matching type and time criteria
     */
    @Query("SELECT r FROM Report r WHERE r.type = :reportType AND r.createdAt > :createdAfter ORDER BY r.createdAt DESC")
    List<Report> findByTypeAndCreatedAtAfter(@Param("reportType") String reportType, 
                                           @Param("createdAfter") LocalDateTime createdAfter);

    /**
     * Retrieves the most recent report of a specific type.
     * 
     * This method supports real-time analytics and dashboard updates by providing
     * quick access to the latest report in each category. Critical for F-005
     * Predictive Analytics Dashboard real-time data requirements.
     * 
     * @param reportType The classification type of the report to retrieve
     * @return Optional containing the most recent report of the specified type,
     *         or empty if no reports exist for the type
     */
    @Query("SELECT r FROM Report r WHERE r.type = :reportType ORDER BY r.createdAt DESC LIMIT 1")
    Optional<Report> findLatestByType(@Param("reportType") String reportType);

    /**
     * Retrieves reports by name pattern matching.
     * 
     * This method supports flexible report search capabilities enabling users
     * to find reports by partial name matching. Useful for report discovery
     * and management within the analytics service interface.
     * 
     * @param namePattern The pattern to match against report names (supports SQL LIKE syntax)
     * @return List of Report entities with names matching the specified pattern
     */
    @Query("SELECT r FROM Report r WHERE r.name LIKE :namePattern ORDER BY r.name ASC")
    List<Report> findByNameContaining(@Param("namePattern") String namePattern);

    /**
     * Counts the total number of reports for a specific dashboard.
     * 
     * This method supports dashboard analytics and summary statistics generation.
     * Essential for F-005 Predictive Analytics Dashboard metrics and reporting
     * overview functionality.
     * 
     * @param dashboardId The unique identifier of the dashboard
     * @return The total count of reports associated with the specified dashboard
     */
    @Query("SELECT COUNT(r) FROM Report r WHERE r.dashboardId = :dashboardId")
    long countByDashboardId(@Param("dashboardId") Long dashboardId);

    /**
     * Counts the total number of reports by type.
     * 
     * This method supports compliance reporting and analytics by providing
     * type-based report statistics. Critical for regulatory reporting
     * requirements and system usage analytics.
     * 
     * @param reportType The classification type of reports to count
     * @return The total count of reports of the specified type
     */
    @Query("SELECT COUNT(r) FROM Report r WHERE r.type = :reportType")
    long countByType(@Param("reportType") String reportType);

    /**
     * Retrieves reports created within a specific date range.
     * 
     * This method supports periodic reporting requirements and audit trail
     * generation. Essential for F-003 Regulatory Compliance Automation
     * and compliance reporting functionality.
     * 
     * @param startDate The beginning of the date range (inclusive)
     * @param endDate The end of the date range (inclusive)
     * @return List of Report entities created within the specified date range
     */
    @Query("SELECT r FROM Report r WHERE r.createdAt BETWEEN :startDate AND :endDate ORDER BY r.createdAt DESC")
    List<Report> findByCreatedAtBetween(@Param("startDate") LocalDateTime startDate, 
                                      @Param("endDate") LocalDateTime endDate);

    /**
     * Retrieves all distinct report types currently stored in the system.
     * 
     * This method supports dynamic UI generation and report categorization
     * by providing a list of all available report types. Useful for
     * populating dropdown menus and filter options in the user interface.
     * 
     * @return List of distinct report type strings currently in use
     */
    @Query("SELECT DISTINCT r.type FROM Report r ORDER BY r.type ASC")
    List<String> findDistinctTypes();

    /**
     * Retrieves all reports that are not associated with any dashboard.
     * 
     * This method supports system maintenance and data integrity by identifying
     * orphaned reports that may need cleanup or reassignment. Useful for
     * system administration and data consistency validation.
     * 
     * @return List of Report entities with null dashboard associations
     */
    @Query("SELECT r FROM Report r WHERE r.dashboardId IS NULL ORDER BY r.createdAt DESC")
    List<Report> findOrphanedReports();

    /**
     * Checks if any reports exist for a specific dashboard.
     * 
     * This method supports efficient existence checking without loading
     * full entity data. Useful for dashboard validation and conditional
     * logic in service layers.
     * 
     * @param dashboardId The unique identifier of the dashboard
     * @return true if at least one report exists for the dashboard, false otherwise
     */
    @Query("SELECT CASE WHEN COUNT(r) > 0 THEN true ELSE false END FROM Report r WHERE r.dashboardId = :dashboardId")
    boolean existsByDashboardId(@Param("dashboardId") Long dashboardId);

    /**
     * Deletes all reports associated with a specific dashboard.
     * 
     * This method supports cascade deletion operations when dashboards
     * are removed from the system. Maintains referential integrity
     * and prevents orphaned report data.
     * 
     * WARNING: This operation is irreversible and should be used with caution.
     * Ensure proper backup and audit procedures are in place before execution.
     * 
     * @param dashboardId The unique identifier of the dashboard
     * @return The number of reports deleted
     */
    @Query("DELETE FROM Report r WHERE r.dashboardId = :dashboardId")
    int deleteByDashboardId(@Param("dashboardId") Long dashboardId);
}