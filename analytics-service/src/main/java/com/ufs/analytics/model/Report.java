package com.ufs.analytics.model;

import jakarta.persistence.Entity; // version 3.1.0
import jakarta.persistence.Id; // version 3.1.0
import jakarta.persistence.GeneratedValue; // version 3.1.0
import jakarta.persistence.GenerationType; // version 3.1.0
import jakarta.persistence.Column; // version 3.1.0
import jakarta.persistence.Lob; // version 3.1.0
import java.time.LocalDateTime; // version 1.8

/**
 * JPA Entity representing a financial report within the analytics service.
 * 
 * This entity stores metadata and content for various financial reports generated by the system,
 * including but not limited to:
 * - Settlement reconciliation reports (F-012 requirement)
 * - Compliance reports (F-003-RQ-003 requirement) 
 * - Risk assessment reports
 * - Customer statements
 * - Regulatory reports
 * 
 * The entity supports the automated reporting requirements specified in the technical specifications:
 * - F-012 Settlement Reconciliation Engine: Generates settlement reconciliation reports
 * - F-003-RQ-003 Compliance Reporting: Provides continuous assessments and compliance status monitoring
 * 
 * The direct dependency on Dashboard entity has been removed to resolve circular dependency,
 * replaced by dashboardId for loose coupling while maintaining relationship tracking.
 */
@Entity
public class Report {

    /**
     * Primary key identifier for the report entity.
     * Uses database auto-generation strategy for optimal performance across different database systems.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, updatable = false)
    private Long id;

    /**
     * Human-readable name of the report.
     * This field is used for display purposes and report identification in the UI.
     * Examples: "Settlement Reconciliation Report", "Compliance Assessment", "Risk Analysis"
     */
    @Column(name = "name", nullable = false, length = 255)
    private String name;

    /**
     * Detailed description of the report content and purpose.
     * Provides context about what the report contains and its intended use case.
     * This field supports the requirement for comprehensive reporting metadata.
     */
    @Column(name = "description", length = 1000)
    private String description;

    /**
     * Classification of the report type for categorization and filtering.
     * Supports various report categories required by the financial system:
     * - SETTLEMENT_RECONCILIATION: Settlement reconciliation reports (F-012)
     * - COMPLIANCE: Regulatory compliance reports (F-003-RQ-003)
     * - RISK_ASSESSMENT: Risk analysis and assessment reports
     * - CUSTOMER_STATEMENT: Customer account statements
     * - REGULATORY: Regulatory submission reports
     * - AUDIT: Internal audit reports
     */
    @Column(name = "type", nullable = false, length = 100)
    private String type;

    /**
     * Binary content of the report file.
     * Stores the actual report data in various formats (PDF, Excel, CSV, etc.).
     * Uses @Lob annotation to handle large binary objects efficiently.
     * This field accommodates the diverse report formats required by financial institutions.
     */
    @Lob
    @Column(name = "content", nullable = false)
    private byte[] content;

    /**
     * Timestamp indicating when the report was initially created.
     * Essential for audit trails and regulatory compliance requirements.
     * Automatically set during report generation to ensure accurate tracking.
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    /**
     * Timestamp indicating when the report was last modified.
     * Supports versioning and change tracking for regulatory compliance.
     * Updated whenever report metadata or content is modified.
     */
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    /**
     * Foreign key reference to the associated dashboard.
     * Maintains relationship with dashboard entities without direct dependency
     * to resolve circular dependency issues in the analytics service.
     * Enables loose coupling while preserving dashboard-report associations.
     */
    @Column(name = "dashboard_id")
    private Long dashboardId;

    /**
     * Default constructor required by JPA specification.
     * Initializes the entity with default values and sets creation timestamps.
     * This constructor is used by the JPA provider for entity instantiation.
     */
    public Report() {
        // Initialize timestamps for new report instances
        LocalDateTime now = LocalDateTime.now();
        this.createdAt = now;
        this.updatedAt = now;
    }

    /**
     * Convenience constructor for creating new report instances with essential fields.
     * Used by service layer for report generation and instantiation.
     * 
     * @param name The name of the report
     * @param description The description of the report content
     * @param type The classification type of the report
     * @param content The binary content of the report
     */
    public Report(String name, String description, String type, byte[] content) {
        this();
        this.name = name;
        this.description = description;
        this.type = type;
        this.content = content;
    }

    /**
     * Gets the unique identifier of the report.
     * @return The report ID
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the report.
     * @param id The report ID
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the name of the report.
     * @return The report name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the report.
     * @param name The report name
     */
    public void setName(String name) {
        this.name = name;
        updateTimestamp();
    }

    /**
     * Gets the description of the report.
     * @return The report description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of the report.
     * @param description The report description
     */
    public void setDescription(String description) {
        this.description = description;
        updateTimestamp();
    }

    /**
     * Gets the type classification of the report.
     * @return The report type
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the type classification of the report.
     * @param type The report type
     */
    public void setType(String type) {
        this.type = type;
        updateTimestamp();
    }

    /**
     * Gets the binary content of the report.
     * @return The report content as byte array
     */
    public byte[] getContent() {
        return content;
    }

    /**
     * Sets the binary content of the report.
     * @param content The report content as byte array
     */
    public void setContent(byte[] content) {
        this.content = content;
        updateTimestamp();
    }

    /**
     * Gets the creation timestamp of the report.
     * @return The creation timestamp
     */
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the creation timestamp of the report.
     * This method is protected and should only be used by JPA or during entity initialization.
     * @param createdAt The creation timestamp
     */
    protected void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets the last update timestamp of the report.
     * @return The last update timestamp
     */
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Sets the last update timestamp of the report.
     * This method is protected and should only be used by JPA or during entity updates.
     * @param updatedAt The last update timestamp
     */
    protected void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Gets the dashboard ID associated with this report.
     * @return The dashboard ID
     */
    public Long getDashboardId() {
        return dashboardId;
    }

    /**
     * Sets the dashboard ID associated with this report.
     * @param dashboardId The dashboard ID
     */
    public void setDashboardId(Long dashboardId) {
        this.dashboardId = dashboardId;
        updateTimestamp();
    }

    /**
     * Updates the updatedAt timestamp to the current time.
     * Called automatically when entity fields are modified.
     */
    private void updateTimestamp() {
        this.updatedAt = LocalDateTime.now();
    }

    /**
     * Determines if the report content is available.
     * @return true if content is present and not empty, false otherwise
     */
    public boolean hasContent() {
        return content != null && content.length > 0;
    }

    /**
     * Gets the size of the report content in bytes.
     * @return The content size in bytes, or 0 if no content
     */
    public long getContentSize() {
        return content != null ? content.length : 0;
    }

    /**
     * Checks if this report is associated with a dashboard.
     * @return true if dashboardId is present, false otherwise
     */
    public boolean isAssociatedWithDashboard() {
        return dashboardId != null;
    }

    /**
     * Determines if the report is a settlement reconciliation report.
     * Supports the F-012 Settlement Reconciliation Engine requirement.
     * @return true if this is a settlement reconciliation report
     */
    public boolean isSettlementReconciliationReport() {
        return "SETTLEMENT_RECONCILIATION".equals(type);
    }

    /**
     * Determines if the report is a compliance report.
     * Supports the F-003-RQ-003 Compliance Reporting requirement.
     * @return true if this is a compliance report
     */
    public boolean isComplianceReport() {
        return "COMPLIANCE".equals(type);
    }

    /**
     * Determines if the report is a regulatory report.
     * @return true if this is a regulatory report
     */
    public boolean isRegulatoryReport() {
        return "REGULATORY".equals(type);
    }

    /**
     * Equality comparison based on report ID.
     * Two reports are considered equal if they have the same non-null ID.
     * @param obj The object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        
        Report report = (Report) obj;
        return id != null && id.equals(report.id);
    }

    /**
     * Hash code generation based on report ID.
     * @return hash code for the report
     */
    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }

    /**
     * String representation of the report entity.
     * Provides essential information without exposing sensitive content.
     * @return String representation of the report
     */
    @Override
    public String toString() {
        return String.format(
            "Report{id=%d, name='%s', type='%s', contentSize=%d bytes, createdAt=%s, updatedAt=%s, dashboardId=%s}",
            id, name, type, getContentSize(), createdAt, updatedAt, dashboardId
        );
    }
}